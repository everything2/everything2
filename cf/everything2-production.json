{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "E2 production resources",
  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : { "S3hostedzoneID" : "Z3AQBSTGFYJSTF", "websiteendpoint" : "s3-website-us-east-1.amazonaws.com", "ELBAccountID": "127311923021"},
      "us-west-1" : { "S3hostedzoneID" : "Z2F56UZL2M1ACD", "websiteendpoint" : "s3-website-us-west-1.amazonaws.com", "ELBAccountID": "027434742980"},
      "us-west-2" : { "S3hostedzoneID" : "Z3BJ6K6RIION7M", "websiteendpoint" : "s3-website-us-west-2.amazonaws.com", "ELBAccountID": "797873946194"},
      "eu-west-1" : { "S3hostedzoneID" : "Z1BKCTXD74EZPE", "websiteendpoint" : "s3-website-eu-west-1.amazonaws.com", "ELBAccountID": "156460612806"},
      "ap-southeast-1" : { "S3hostedzoneID" : "Z3O0J2DXBE1FTB", "websiteendpoint" : "s3-website-ap-southeast-1.amazonaws.com","ELBAccountID": "114774131450"},
      "ap-southeast-2" : { "S3hostedzoneID" : "Z1WCIGYICN2BYD", "websiteendpoint" : "s3-website-ap-southeast-2.amazonaws.com","ELBAccountID": "783225319266"},
      "ap-northeast-1" : { "S3hostedzoneID" : "Z2M4EHUR26P7ZW", "websiteendpoint" : "s3-website-ap-northeast-1.amazonaws.com","ELBAccountID": "582318560864"},
      "sa-east-1" : { "S3hostedzoneID" : "Z31GFT0UA1I2HV", "websiteendpoint" : "s3-website-sa-east-1.amazonaws.com", "ELBAccountID": "507241528517"}
    },
    "SESIdentity": {
      "us-west-2": { "arn": "arn:aws:ses:us-west-2:254865750963:identity/accounthelp@everything2.com" }
    }
  },
  "Resources": {
    "AssetsS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "assets.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "CFBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "cloudformation.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "NodeBackupBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "nodebackup.everything2.com"
      }
    },
    "StaticAssetBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "static-uswest2.everything2.com"
      }
    },
    "HomenodeImagesS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "hnimagew.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "GlacierS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "glacierstorage.everything2.com"
      }
    },
    "SitemapS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "sitemap.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "JSCSSBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "jscssw.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "E2DotComR53Zone": {
      "Type": "AWS::Route53::HostedZone",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "everything2.com"
      }
    },
    "E2DotComJSCSSWR53RR": {
      "Type": "AWS::Route53::RecordSet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "jscssw.everything2.com",
        "HostedZoneName": "everything2.com.",
        "AliasTarget": {
          "HostedZoneId": {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "S3hostedzoneID"]},
          "DNSName": {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "websiteendpoint"]}
        },
        "Type": "A"
      }
    },
    "DevelopmentR53RR": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": "development.everything2.com",
        "HostedZoneName": "everything2.com.",
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          "127.0.0.1"
        ]
      }
    },
    "AppVPC": {
      "Type": "AWS::EC2::VPC",
      "DeletionPolicy": "Retain",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true
      }
    },
    "AppVPCIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "DeletionPolicy": "Retain"
    },
    "AppVPCIGWAttach": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DeletionPolicy": "Retain",
      "Properties": {
        "InternetGatewayId": { "Ref": "AppVPCIGW" },
        "VpcId": {"Ref": "AppVPC"}
      }
    },
    "ELBFrontendSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "GroupDescription": "E2 App Frontend Security Group",
        "GroupName": "E2-App-Frontend-Security-Group",
        "VpcId": {"Ref": "AppVPC"},
        "SecurityGroupIngress": [
          {
             "FromPort": "80",
             "ToPort": "80",
             "CidrIp": "0.0.0.0/0",
             "IpProtocol": "tcp"
          },
          {
              "FromPort": "443",
              "ToPort": "443",
              "CidrIp": "0.0.0.0/0",
              "IpProtocol": "tcp"
          }
        ]
      }
    },
    "VPCEndpointSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "GroupDescription": "VPC Service Endpoint Security Group",
        "GroupName": "VPC-Service-Endpoint-Security-Group",
        "VpcId": {"Ref": "AppVPC"},
        "SecurityGroupIngress": [
          {
              "FromPort": "443",
              "ToPort": "443",
              "SourceSecurityGroupId": { "Fn::GetAtt": ["E2AppWebheadSecurityGroup", "GroupId"] },
              "IpProtocol": "tcp"
          },
          {
              "FromPort": "443",
              "ToPort": "443",
              "CidrIp": "10.0.0.0/8",
              "IpProtocol": "tcp"
          }
        ]
      }
    },
    "MainDBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "GroupDescription": "Main Database Security Group",
        "GroupName": "DB-Ingress-Security-Group",
        "VpcId": {"Ref": "AppVPC"},
        "SecurityGroupIngress": [
          {
             "FromPort": "3306",
             "ToPort": "3306",
             "SourceSecurityGroupId": { "Fn::GetAtt": [ "ELBFrontendSecurityGroup", "GroupId"] },
             "IpProtocol": "tcp"
          }
        ]
      }
    },
    "AppVPCSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"},
        "MapPublicIpOnLaunch": true,
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": "us-west-2a"
      }
    },
    "AppVPCSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"},
        "MapPublicIpOnLaunch": true,
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": "us-west-2b"
      }
    },
    "AppVPCSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"},
        "MapPublicIpOnLaunch": false,
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone": "us-west-2a"
      }
    },
    "AppVPCSubnet4": {
      "Type": "AWS::EC2::Subnet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"},
        "MapPublicIpOnLaunch": false,
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": "us-west-2b"
      }
    },
    "E2ELBCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DomainName": "everything2.com",
        "ValidationMethod": "DNS",
        "SubjectAlternativeNames": ["everything2.net","everything2.org","*.everything2.net","*.everything2.org","*.everything2.com"]
      }
    },
    "E2AppMailerPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the app server to send email from accounthelp@everything2.com",
        "ManagedPolicyName": "E2AppMailerPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "ses:SendEmail",
            "Resource": {"Fn::FindInMap" : [ "SESIdentity", { "Ref" : "AWS::Region" }, "arn"]}
          }]
        }
      }
    },
    "CloudWatchEventsWritePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the app components to write to the events buses",
        "ManagedPolicyName": "CloudWatchEventsWritePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "events:PutEvents",
            "Resource": "*"
          }]
        }
      }
    },
    "SecretsS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "secrets.everything2.com"
      }
    },
    "E2AppWebheadSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "GroupDescription": "E2 App Webhead Security Group",
        "GroupName": "E2-App-Webhead-Security-Group",
        "VpcId": {"Ref": "AppVPC"},
        "SecurityGroupIngress": [
          {
            "FromPort": "443",
            "ToPort": "443",
            "SourceSecurityGroupId": { "Fn::GetAtt": [ "ELBFrontendSecurityGroup", "GroupId"] },
            "IpProtocol": "tcp"
          }
        ]
      }
    },
    "E2AppS3Policy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows E2 machines to interact with various S3 buckets",
        "ManagedPolicyName": "E2AppS3Policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["s3:PutObject","s3:DeleteObject","s3:GetObject"],
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "NodeBackupBucket", "Arn"] }, "/*"]]}
          },
          {
            "Effect": "Allow",
            "Action": "s3:PutObject",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "HomenodeImagesS3Bucket", "Arn"] }, "/*"]]}
          }]
        }
      }
    },
    "E2AppSecretsAccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows app worker to read the appropriate secrets",
        "ManagedPolicyName": "E2AppSecretsAccessPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/recaptcha_v3_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/infected_ips_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/banned_user_agents_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/banned_ips_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/banned_ipblocks_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "secretsmanager:GetSecretValue",
              "Resource": {"Ref": "E2DBMasterPassword"}
            },
            {
              "Effect": "Allow",
              "Action": "secretsmanager:ListSecrets",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "EverythingDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DBSubnetGroupName": "e2-app-db-subnet-group-2",
        "DBSubnetGroupDescription": "E2 VPC RDS DB Subnet Group",
        "SubnetIds": [{"Ref": "AppVPCSubnet3"}, {"Ref": "AppVPCSubnet4"}]
      }
    },
    "EverythingDB": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy": "Retain",
      "Properties": {
        "MaxAllocatedStorage": "200",
        "AllowMajorVersionUpgrade": true,
        "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"},"a"]]},
        "BackupRetentionPeriod": 7,
        "DBInstanceClass": "db.t4g.medium",
        "DBInstanceIdentifier": "everything2vpc",
        "Engine": "mysql",
        "EngineVersion": "8.0.34",
        "EnableCloudwatchLogsExports": ["slowquery","error"],
        "MultiAZ": false,
        "CACertificateIdentifier": "rds-ca-rsa2048-g1",
        "EnablePerformanceInsights": true,
        "DeletionProtection": true,
        "DBSubnetGroupName": {"Ref": "EverythingDBSubnetGroup"},
        "StorageType": "gp2",
        "VPCSecurityGroups": [{"Fn::GetAtt": ["AppVPC","DefaultSecurityGroup"]}, {"Ref": "MainDBSecurityGroup"}],
        "DBParameterGroupName": {"Ref": "EverythingDB80Parameters"},
	"OptionGroupName": {"Ref": "DB80OptionGroup"},
        "MasterUsername": "everyuser",
        "MasterUserPassword": {"Fn::Join": ["", ["{{resolve:secretsmanager:", {"Ref": "E2DBMasterPassword"}, "::password}}"]]}
      }
    },
    "EverythingDB80Parameters": {
      "Type": "AWS::RDS::DBParameterGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Enables stored procedures for E2 on mysql 8.0",
        "Family": "mysql8.0",
        "Parameters": {
          "innodb_flush_log_at_trx_commit": 1,
          "log_bin_trust_function_creators": 1,
          "explicit_defaults_for_timestamp": 0,
          "long_query_time": 3
        }
      }
    },
    "DB80OptionGroup": {
      "Type": "AWS::RDS::OptionGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "EngineName": "mysql",
        "MajorEngineVersion": "8.0",
        "OptionGroupDescription": "mysql-8.0 default option group",
        "OptionConfigurations": []
      }
    },
    "E2DBMasterPassword": {
      "Type": "AWS::SecretsManager::Secret",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Username and password for the E2 database",
        "Name": "E2DBMasterPassword",
        "GenerateSecretString": {
          "SecretStringTemplate": "{\"username\": \"everyuser\"}",
          "GenerateStringKey": "password",
          "PasswordLength": 16,
          "ExcludeCharacters": "\"@/\\"
        }
      }
    },
    "E2MasterPasswordAttachment": {
      "Type" : "AWS::SecretsManager::SecretTargetAttachment",
      "DeletionPolicy": "Retain",
      "Properties": {
        "SecretId": {"Ref": "E2DBMasterPassword" },
        "TargetId": {"Ref": "EverythingDB"},
        "TargetType": "AWS::RDS::DBInstance"
      }
    },
    "SitemapBucketWritePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows entites to write to the sitemaps bucket",
        "ManagedPolicyName": "SitemapBucketWritePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:PutObject","s3:DeleteObject"],
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SitemapS3Bucket", "Arn"] }, "/*"]]}
            }
          ]
        }
      }
    },
    "AppErrorsEventBus": {
      "Type": "AWS::Events::EventBus",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "com.everything2.errors"
      }
    },
    "AppUninitializedValuesEventBus": {
      "Type": "AWS::Events::EventBus",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "com.everything2.uninitialized"
      }
    },
    "ApplicationUninitializedValuesArchive": {
      "Type": "AWS::Events::Archive",
      "DeletionPolicy": "Retain",
      "Properties": {
        "ArchiveName": "e2-app-uninitialized-archive",
        "Description": "Archiving app uninits",
        "RetentionDays": 3,
        "SourceArn": {"Fn::GetAtt": ["AppUninitializedValuesEventBus", "Arn"]}
      }
    },
    "ApplicationUninitializedValueLoggingRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Subscribing to E2 app uninitialized values",
        "Name": "e2-app-uninitialized-values-rule",
        "EventBusName": {"Fn::GetAtt": ["AppUninitializedValuesEventBus", "Name"]},
        "EventPattern": {"source": ["e2.webapp"], "detail-type": ["E2 Application Error"]},
        "Targets": [{
          "Arn": {"Fn::GetAtt": ["AppUninitializedLogGroup","Arn"]},
          "Id": "app-uninitialized-values-rule"
        }]
      }
    },
    "AppErrorsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/events/e2-app-errors",
        "RetentionInDays": 3
      }
    },
    "RDSErrorsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/rds/instance/everything2vpc/error",
        "RetentionInDays": 3
      }
    },
    "RDSSlowLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/rds/instance/everything2vpc/slowquery",
        "RetentionInDays": 3
      }
    },
    "AppUninitializedLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/events/e2-uninitialized-errors",
        "RetentionInDays": 3
      }
    },
    "ApplicationErrorLoggingRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Subscribing to E2 app errors",
        "Name": "e2-app-errors-rule",
        "EventBusName": {"Fn::GetAtt": ["AppErrorsEventBus", "Name"]},
        "EventPattern": {"source": ["e2.webapp"], "detail-type": ["E2 Application Error"]},
        "Targets": [{
          "Arn": {"Fn::GetAtt": ["AppErrorsLogGroup","Arn"]},
          "Id": "Id1844360018781"
        }]
      }
    },
    "ApplicationEventsArchive": {
      "Type": "AWS::Events::Archive",
      "Properties": {
        "ArchiveName": "e2-app-errors-archive",
        "Description": "Archiving app errors",
        "RetentionDays": 3,
        "SourceArn": {"Fn::GetAtt": ["AppErrorsEventBus", "Arn"]}
      }
    },
    "AppVPCRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"}
      }
    },
    "AppVPCS3SubnetAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "AppVPCRouteTable"},
        "SubnetId": {"Ref": "AppVPCSubnet3"}
      }
    },
    "AppVPCS3SubnetAssociation4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "AppVPCRouteTable"},
        "SubnetId": {"Ref": "AppVPCSubnet4"}
      }
    },
    "E2AppECRRegistry": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": "everything2/e2app",
        "LifecyclePolicy": {
          "LifecyclePolicyText": "{\"rules\": [{\"rulePriority\": 1, \"description\": \"Expire images older than 3 days\", \"selection\": {\"tagStatus\": \"untagged\", \"countType\": \"sinceImagePushed\",\"countUnit\": \"days\", \"countNumber\": 3 }, \"action\": {\"type\": \"expire\"}}]}"
        }
      }
    },
    "CodeBuildUpdateApplicationECRRegistry": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the codebuild job to update the ECR Registry",
        "ManagedPolicyName": "CodeBuildECRPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:BatchCheckLayerAvailability",
              "ecr:BatchGetImage",
              "ecr:GetDownloadUrlForLayer",
              "ecr:GetRepositoryPolicy",
              "ecr:Describe*",
              "ecr:List*",
              "ecr:CompleteLayerUpload",
              "ecr:GetAuthorizationToken",
              "ecr:InitiateLayerUpload",
              "ecr:PutImage",
              "ecr:UploadLayerPart"
            ],
            "Resource": "*"
          }]
        }
      }
    },
    "ApplicationDockerCodeBuildRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "codebuild.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Docker builder CodeBuild role",
        "ManagedPolicyArns": [
            {"Ref": "CodeBuildUpdateApplicationECRRegistry"},
            {"Ref": "DockerCodeBuildLogWritePolicy"},
            {"Ref": "BuildcacheAccessPolicy"},
            {"Ref": "DockerHubSecretsAccessPolicy"},
            {"Ref": "DeployedAssetsManagement"},
            "arn:aws:iam::aws:policy/AWSCodeCommitReadOnly"
        ],
        "Path": "/",
        "RoleName": "Docker-Builder-CodeBuild-Role"
      }
    },
    "DockerCodeBuildProject": {
      "Type": "AWS::CodeBuild::Project",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "LogsConfig": {
          "CloudWatchLogs": {
            "Status": "ENABLED",
            "GroupName": {"Ref": "DockerCodeBuildLogGroup"}
          }
        },
        "Name": "E2-Application-Builder",
        "ServiceRole": {"Ref": "ApplicationDockerCodeBuildRole"},
        "Source": {
          "Type": "CODECOMMIT",
          "BuildSpec": "docker/buildspec.yml",
          "Location": {"Fn::GetAtt": ["Everything2CodeCommitRepo","CloneUrlHttp"]}
        },
        "TimeoutInMinutes": 90,
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/standard:5.0",
          "Type": "LINUX_CONTAINER",
          "EnvironmentVariables": [
            {
              "Name": "AWS_REGION",
              "Value": {"Ref": "AWS::Region"}
            },
            {
              "Name": "AWS_ACCOUNT_ID",
              "Value": {"Ref": "AWS::AccountId"}
            },
            {
              "Name": "IMAGE_TAG",
              "Value": "latest"
            },
            {
              "Name": "BUILDCACHE_BUCKET",
              "Value": {"Ref": "BuildcacheBucket"}
            },
            {
              "Name": "SECRETS_BUCKET",
              "Value": {"Ref": "SecretsS3Bucket"} 
            },
            {
              "Name": "ASSETS_BUCKET",
              "Value": {"Ref": "DeployedAssetsBucket"}
            }
          ],
          "PrivilegedMode": true
        },
        "Cache": {
          "Location": "LOCAL",
          "Type": "LOCAL",
          "Modes": ["LOCAL_DOCKER_LAYER_CACHE"]
        }
      }
    },
    "DockerCodeBuildLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/codebuild/dockerbuild",
        "RetentionInDays": 3
      }
    },
    "DockerCodeBuildLogWritePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows CodeBuild to write to the log group",
        "ManagedPolicyName": "DockerCodeBuildLogWritePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "DockerCodeBuildLogGroup", "Arn"] }, ":*"]]}
          },
          {
            "Effect": "Allow",
            "Action": "logs:CreateLogStream",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "DockerCodeBuildLogGroup", "Arn"] }, ":*"]]}
          }]
        }
      }
    },
    "DockerHubSecretsAccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows CodeBuild worker to read the Docker Hub secrets so it can fetch the Ubuntu secret",
        "ManagedPolicyName": "DockerHubSecretsAccessPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/docker_hub_password"]]}
            }
          ]
        }
      }
    },
    "BuildcacheBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "buildcache.everything2.com"
      }
    },
    "BuildcacheAccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Ability to access the buildcache bucket",
        "ManagedPolicyName": "BuildcacheAccessPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:GetObject","s3:DeleteObject","s3:PutObject"],
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "BuildcacheBucket", "Arn"] }, "/*"]]}
            },
            {
              "Effect": "Allow",
              "Action": ["s3:ListBucket"],
              "Resource": {"Fn::GetAtt": ["BuildcacheBucket", "Arn"]}
            }
          ]
        }
      }
    },
    "ECSServiceLinkedRole": {
      "Type": "AWS::IAM::ServiceLinkedRole",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AWSServiceName": "ecs.amazonaws.com",
        "Description": "Role to enable Amazon ECS to manage your cluster."
      }
    },
    "ECSAppCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "CapacityProviders": ["FARGATE","FARGATE_SPOT"],
        "ClusterName": "E2-App-ECS-Cluster" 
      }
    },
    "ELBLogsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "elblogs.everything2.com",
        "LifecycleConfiguration": {
          "Rules": [{
            "Id": "DeleteAfter30",
            "Status": "Enabled",
            "ExpirationInDays": "30"
          }]
        }
      }
    },
    "ELBLogsSystemAccessPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Bucket": {"Ref": "ELBLogsBucket"},
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "AWS": {"Fn::Join": ["",["arn:aws:iam::",{"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ELBAccountID"]},":root"]]}
            },
            "Action": "s3:PutObject",
            "Resource": {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "ELBLogsBucket"},"/AWSLogs/",{"Ref": "AWS::AccountId"},"/*"]]}
          },
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "delivery.logs.amazonaws.com"
            },
            "Action": "s3:PutObject",
            "Resource": {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "ELBLogsBucket"}, "/AWSLogs/",{"Ref": "AWS::AccountId"},"/*"]]},
            "Condition": {
              "StringEquals": {
                "s3:x-amz-acl": "bucket-owner-full-control"
              }
            }
          },
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "delivery.logs.amazonaws.com"
            },
            "Action": "s3:GetBucketAcl",
            "Resource": {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "ELBLogsBucket"}]]}
          }]
        } 
      }
    },
    "NodepackBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "nodepack.everything2.com"
      }
    },
    "NodepackS3Policy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows nodepack lambda jobs to interact with the nodepack bucket",
        "ManagedPolicyName": "NodepackS3Policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["s3:PutObject","s3:DeleteObject","s3:GetObject"],
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "NodepackBucket", "Arn"] }, "/*"]]}
          },
          {
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": {"Fn::GetAtt": ["NodepackBucket", "Arn"]}
          }]
        }
      }
    },
    "E2AppFargateTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Cpu": 1024,
        "Memory": 3072,
        "Family": "e2app-family",
        "ExecutionRoleArn": {"Ref": "E2TaskExecutionRole"},
        "RequiresCompatibilities": ["FARGATE"],
        "NetworkMode": "awsvpc",
        "RuntimePlatform": {
          "CpuArchitecture": "X86_64",
          "OperatingSystemFamily": "LINUX"
        },
        "TaskRoleArn": {"Ref": "AppFargateTaskRole"},
        "ContainerDefinitions": [{
          "Name": "e2app",
          "Image": {"Fn::Join": [":",[{"Fn::GetAtt": ["E2AppECRRegistry","RepositoryUri"]},"latest"]]},
          "Memory": 3072,
          "Essential": true,
          "HealthCheck": {
            "Interval": 30,
            "Retries": 5,
            "StartPeriod": 40,
            "Timeout": 5,
            "Command": ["CMD-SHELL","curl -f http://localhost/ || exit 1" ]
          },
          "Environment": [
            {
              "Name": "E2_DBSERV",
              "Value": {"Fn::GetAtt": ["EverythingDB","Endpoint.Address"]}
            }
          ],
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": "/aws/fargate/fargate-app-awslogs",
              "awslogs-region": {"Ref": "AWS::Region"},
              "awslogs-stream-prefix": "e2-fargate"
            }
          },
          "Ulimits": [{
            "HardLimit": 8192,
            "Name": "nofile",
            "SoftLimit": 8192
          }],
          "PortMappings": [{
            "ContainerPort": 443,
            "HostPort": 443
          }]
        }]
      }
    },
    "E2CronFargateTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Cpu": 512,
        "Memory": 1024,
        "Family": "e2cron-family",
        "ExecutionRoleArn": {"Ref": "E2TaskExecutionRole"},
        "RequiresCompatibilities": ["FARGATE"],
        "NetworkMode": "awsvpc",
        "RuntimePlatform": {
          "CpuArchitecture": "X86_64",
          "OperatingSystemFamily": "LINUX"
        },
        "TaskRoleArn": {"Ref": "AppFargateTaskRole"},
        "ContainerDefinitions": [{
          "Name": "e2app",
          "Image": {"Fn::Join": [":",[{"Fn::GetAtt": ["E2AppECRRegistry","RepositoryUri"]},"latest"]]},
          "Memory": 1024,
          "Essential": true,
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": "/aws/fargate/fargate-cron-awslogs",
              "awslogs-region": {"Ref": "AWS::Region"},
              "awslogs-stream-prefix": "e2-fargate"
            }
          },
          "Ulimits": [{
            "HardLimit": 8192,
            "Name": "nofile",
            "SoftLimit": 8192
          }],
          "Environment": [
            {
              "Name": "E2_DBSERV",
              "Value": {"Fn::GetAtt": ["EverythingDB","Endpoint.Address"]}
            }
          ]
        }]
      }
    },
    "FargateServiceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/fargate/fargate-app-awslogs",
        "RetentionInDays": 3
      }
    },
    "FargateCronLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/fargate/fargate-cron-awslogs",
        "RetentionInDays": 3
      }
    },
    "ECSFargateAppService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {"Ref": "ECSAppCluster"},
        "EnableECSManagedTags": true,
        "ServiceName": "E2-App-Fargate-Service",
        "DeploymentController": {
          "Type": "ECS"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100
        },
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
            "Subnets": [{"Ref": "AppVPCSubnet1"}]
          }
        },
        "DesiredCount": 1,
        "HealthCheckGracePeriodSeconds": 30,
        "TaskDefinition": {"Ref": "E2AppFargateTaskDefinition"},
        "CapacityProviderStrategy": [{
          "CapacityProvider": "FARGATE",
          "Base": 1,
          "Weight": 1
        },{
          "CapacityProvider": "FARGATE_SPOT",
          "Weight": 4
        }],
        "LoadBalancers": [{
          "ContainerName": "e2app",
          "ContainerPort": 443,
          "TargetGroupArn": {"Ref": "FargateTargetGroup"} 
        }]
      }
    },
    "ContainerizedFrontendELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "E2-Containerized-Frontend-ELB",
        "Subnets": [{"Ref": "AppVPCSubnet1"},{"Ref": "AppVPCSubnet2"}],
        "SecurityGroups": [{"Ref": "ELBFrontendSecurityGroup"}],
        "LoadBalancerAttributes": [
          {
            "Key": "access_logs.s3.enabled",
            "Value": true
          },
          {
            "Key": "access_logs.s3.bucket",
            "Value": {"Ref": "ELBLogsBucket"}
          }
        ]
      }
    },
    "FargateTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "E2-App-Fargate-HTTPS-TG",
        "VpcId": {"Ref": "AppVPC"},
        "Protocol": "HTTPS",
        "Port": "443",
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 5,
        "HealthCheckEnabled": true,
        "HealthCheckPort": "443",
        "HealthCheckProtocol": "HTTPS",
        "HealthCheckTimeoutSeconds": 20,
        "Matcher": {
          "HttpCode": "200"
        },
        "TargetType": "ip",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "10"
          }
        ]
      }
    },
    "ELBContainerizedAppHTTPSListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {"Ref": "FargateTargetGroup"},
            "Type": "forward"
          }
        ],
        "Certificates": [{"CertificateArn": {"Ref": "E2ELBCertificate"}}],
        "LoadBalancerArn": {"Ref": "ContainerizedFrontendELB"},
        "Port": "443",
        "Protocol": "HTTPS",
        "SslPolicy": "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
      }
    },
    "ELBContainerizedAppHTTPListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "redirect",
            "RedirectConfig": {
              "Protocol": "HTTPS",
              "Port": "443",
              "Host": "#{host}",
              "Path": "/#{path}",
              "Query": "#{query}",
              "StatusCode": "HTTP_301"
            }
          }
        ],
        "LoadBalancerArn": {"Ref": "ContainerizedFrontendELB"},
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "AppFargateTaskRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "ecs-tasks.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Role for Fargate App workloads",
        "ManagedPolicyArns": [
            {"Ref": "E2AppS3Policy"},
            {"Ref": "E2AppMailerPolicy"},
            {"Ref": "E2AppSecretsAccessPolicy"},
            {"Ref": "CloudWatchEventsWritePolicy"},
            {"Ref": "NodepackS3Policy"},
            {"Ref": "SitemapBucketWritePolicy"}
        ],
        "Path": "/",
        "RoleName": "E2-App-Fargate-Task-Role"
      }
    },
    "E2TaskExecutionRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "ecs-tasks.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Role for E2 Task Execution Role inside of the container",
        "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ],
        "Path": "/",
        "RoleName": "E2-Task-Execution-Role"
      }
    },
    "AppAutoScalingRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "RoleName": "e2-fargate-auto-scaling-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "application-autoscaling.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [{
          "PolicyName": "service-auto-scaling-policy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": {
              "Effect": "Allow",
              "Action": ["ecs:DescribeServices","ecs:UpdateServices","cloudwatch:PutMetricAlarm","cloudwatch:DescribeAlarms","cloudwatch:DeleteAlarms"],
              "Resource": "*"
            }
          }
        }]
      }
    },
    "FargateAppScalableTarget": {
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
      "DeletionPolicy": "Retain",
      "Properties": {
        "RoleARN": {"Fn::GetAtt": ["AppAutoScalingRole","Arn"]},
        "ResourceId": {"Fn::Join": ["/",["service",{"Ref": "ECSAppCluster"},{"Fn::GetAtt": ["ECSFargateAppService","Name"]}]]},
        "ServiceNamespace": "ecs",
        "ScalableDimension": "ecs:service:DesiredCount",
        "MinCapacity": 1,
        "MaxCapacity": 3
      }
    },
    "FargateAppAutoScalingPolicy": {
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "PolicyName": "FargateAppCPUAutoScalingPolicy",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {"Ref": "FargateAppScalableTarget"},
        "TargetTrackingScalingPolicyConfiguration": {
          "DisableScaleIn": true,
          "TargetValue": 60,
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
          }
        }
      }
    },
    "ECSEventsRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "RoleName": "e2-ecs-events-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "events.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [{
          "PolicyName": "e2-ecs-pass-any-role",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": {
              "Effect": "Allow",
              "Action": ["iam:PassRole"],
              "Resource": "*"
            }
          }
        },
        {
          "PolicyName": "e2-ecs-run-any-task",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": {
              "Effect": "Allow",
              "Action": ["ecs:RunTask"],
              "Resource": "*"
            }
          }
        }]
      }
    },
    "CronChatterboxCleanupRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Cron rule to call chatterbox-cleanup",
        "Name": "cron-chatterbox-cleanup",
        "State": "ENABLED",
        "ScheduleExpression": "cron(50 * * * ? *)",
        "Targets": [{
          "Id": "chatterbox-cleanup-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_clean_cbox.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronGenerateSitemapRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Cron rule to call generate-sitemap",
        "Name": "cron-generate-sitemap",
        "State": "ENABLED",
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "Targets": [{
          "Id": "cron-sitemap-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_generate_sitemap.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronDatastashRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Cron rule to call datastash",
        "Name": "cron-datastash",
        "State": "ENABLED",
        "ScheduleExpression": "rate(2 minutes)",
        "Targets": [{
          "Id": "datastash-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_datastash.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronDatastashLengthyRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Cron rule to call datastash lengthy",
        "Name": "cron-datastash-lengthy",
        "State": "ENABLED",
        "ScheduleExpression": "rate(6 hours)",
        "Targets": [{
          "Id": "datastash-lengthy-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_datastash.pl\",\"--lengthy\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronIQMRecalcRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Cron rule to call IQM Recalculate",
        "Name": "cron-iqm-recalc",
        "State": "ENABLED",
        "ScheduleExpression": "rate(1 day)",
        "Targets": [{
          "Id": "iqm-recalc-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_iqm_recalculate.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronRefreshRoomsRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Cron rule to call refresh rooms",
        "Name": "cron-refresh-rooms",
        "State": "ENABLED",
        "ScheduleExpression": "rate(5 minutes)",
        "Targets": [{
          "Id": "refresh-rooms-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_refresh_rooms.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronCleanOldRoomsRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Cron rule to call clean old rooms",
        "Name": "cron-clean-old-rooms",
        "State": "ENABLED",
        "ScheduleExpression": "rate(1 day)",
        "Targets": [{
          "Id": "clean-old-rooms-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_clean_old_rooms.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronWriteupReaperRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Cron rule to call legacy writeup reaper",
        "Name": "cron-writeup-reaper",
        "State": "ENABLED",
        "ScheduleExpression": "rate(1 day)",
        "Targets": [{
          "Id": "writeup-reaper-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_writeup_reaper.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "Everything2CodeCommitRepo": {
      "Type": "AWS::CodeCommit::Repository",
      "DeletionPolicy": "Retain",
      "Properties": {
        "RepositoryName": "everything2",
        "RepositoryDescription": "Mirror of GitHub everything2/everything2 repo"
      }
    },
    "ExtGithubCodeCommitUser": {
      "Type": "AWS::IAM::User",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Policies": [
          {
            "PolicyName": "external-github-codecommit-access",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
              {
                "Effect": "Allow",
                "Action": "codecommit:*",
                "Resource": {"Fn::GetAtt": ["Everything2CodeCommitRepo","Arn"]}
              }]
            }
          }
        ],
        "UserName": "External-GitHub-Actions-User"
      }
    },
    "DeployedAssetsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "deployed.everything2.com",
        "AccessControl": "PublicRead",
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": false,
          "BlockPublicPolicy": false,
          "IgnorePublicAcls": false,
          "RestrictPublicBuckets": false
        }
      }
    },
    "DeployedAssetsBucketReadPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {"Ref": "DeployedAssetsBucket"},
        "PolicyDocument": {
          "Id": "DeployedAssetsRead",
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "PublicReadForGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "DeployedAssetsBucket"},"/*"]]}
            }
          ]
        }
      }
    },
    "DeployedAssetsManagement": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Allows CodeBuild to deploy git-tagged assets",
        "ManagedPolicyName": "DeployedAssetsS3Policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["s3:PutObject","s3:DeleteObject","s3:GetObject"],
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "DeployedAssetsBucket", "Arn"] }, "/*"]]}
          },
          {
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": {"Fn::GetAtt": ["DeployedAssetsBucket", "Arn"]}
          }]
        }
      }
    },
    "DeployedAssetsRS": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "Name": "deployed.everything2.com",
        "HostedZoneName": "everything2.com.",
        "AliasTarget": {
          "HostedZoneId": {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "S3hostedzoneID"]},
          "DNSName": {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "websiteendpoint"]}
        },
        "Type": "A"
      }
    },
    "GlueDatabase": {
      "Type": "AWS::Glue::Database",
      "Properties": {
        "CatalogId": {"Ref": "AWS::AccountId"},
        "DatabaseInput": {
          "Name": "e2gluedb",
          "Description": "E2 Glue Database for Athena"
        }
      }
    },
    "ELBLogsGlueTable": {
      "Type": "AWS::Glue::Table",
      "Properties": {
        "CatalogId": {"Ref": "AWS::AccountId"},
        "DatabaseName": {"Ref": "GlueDatabase"},
        "TableInput": {
          "Name": "elblogs",
          "Description": "ELB Logs for E2's application ELB",
          "TableType": "EXTERNAL_TABLE",
          "Parameters": {
            "projection.enabled": true,
            "projection.day.type": "date",
            "projection.day.range": "2022/01/01,NOW",
            "projection.day.format": "yyyy/MM/dd",
            "projection.day.interval": 1,
            "projection.day.interval.unit": "DAYS",
            "storage.location.template": {"Fn::Sub": "s3://${ELBLogsBucket}/AWSLogs/${AWS::AccountId}/elasticloadbalancing/${AWS::Region}/${!day}"}
          },
          "PartitionKeys": [{
            "Name": "day",
            "Type": "string"
          }],
          "StorageDescriptor": {
            "Location": {"Fn::Sub": "s3://${ELBLogsBucket}/AWSLogs/${AWS::AccountId}/elasticloadbalancing/${AWS::Region}/"},
            "InputFormat": "org.apache.hadoop.mapred.TextInputFormat",
            "OutputFormat": "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat",
            "SerdeInfo": {
              "SerializationLibrary": "org.apache.hadoop.hive.serde2.RegexSerDe",
              "Parameters": {
                "serialization.format": 1,
                "input.regex": "([^ ]*) ([^ ]*) ([^ ]*) ([^ ]*):([0-9]*) ([^ ]*)[:-]([0-9]*) ([-.0-9]*) ([-.0-9]*) ([-.0-9]*) (|[-0-9]*) (-|[-0-9]*) ([-0-9]*) ([-0-9]*) \"([^ ]*) (.*) (- |[^ ]*)\" \"([^\"]*)\" ([A-Z0-9-_]+) ([A-Za-z0-9.-]*) ([^ ]*) \"([^\"]*)\" \"([^\"]*)\" \"([^\"]*)\" ([-.0-9]*) ([^ ]*) \"([^\"]*)\" \"([^\"]*)\" \"([^ ]*)\" \"([^\\s]+?)\" \"([^\\s]+)\" \"([^ ]*)\" \"([^ ]*)\""
              }
            },
            "Columns": [
              {
                "Name": "type",
                "Type": "string"
              },
              {
                "Name": "time",
                "Type": "string"
              },
              {
                "Name": "elb",
                "Type": "string"
              },
              {
                "Name": "client_ip",
                "Type": "string"
              },
              {
                "Name": "client_port",
                "Type": "int"
              },
              {
                "Name": "target_ip",
                "Type": "string"
              },
              {
                "Name": "target_port",
                "Type": "int"
              },
              {
                "Name": "request_processing_time",
                "Type": "double"
              },
              {
                "Name": "target_processing_time",
                "Type": "double"
              },
              {
                "Name": "response_processing_time",
                "Type": "double"
              },
              {
                "Name": "elb_status_code",
                "Type": "int"
              },
              {
                "Name": "target_status_code",
                "Type": "string"
              },
              {
                "Name": "received_bytes",
                "Type": "bigint"
              },
              {
                "Name": "sent_bytes",
                "Type": "bigint"
              },
              {
                "Name": "request_verb",
                "Type": "string"
              },
              {
                "Name": "request_url",
                "Type": "string"
              },
              {
                "Name": "request_proto",
                "Type": "string"
              },
              {
                "Name": "user_agent",
                "Type": "string"
              },
              {
                "Name": "ssl_cipher",
                "Type": "string"
              },
              {
                "Name": "ssl_protocol",
                "Type": "string"
              },
              {
                "Name": "target_group_arn",
                "Type": "string"
              },
              {
                "Name": "trace_id",
                "Type": "string"
              },
              {
                "Name": "domain_name",
                "Type": "string"
              },
              {
                "Name": "chosen_cert_arn",
                "Type": "string"
              },
              {
                "Name": "matched_rule_priority",
                "Type": "string"
              },
              {
                "Name": "request_creation_time",
                "Type": "string"
              },
              {
                "Name": "actions_executed",
                "Type": "string"
              },
              {
                "Name": "redirect_url",
                "Type": "string"
              },
              {
                "Name": "lamda_error_reason",
                "Type": "string"
              },
              {
                "Name": "target_port_list",
                "Type": "string"
              },
              {
                "Name": "target_status_code_list",
                "Type": "string"
              },
              {
                "Name": "classification",
                "Type": "string"
              },
              {
                "Name": "classification_reason",
                "Type": "string"
              }
            ]
          }
        }
      }
    },
    "AthenaResultsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "athenaresults.everything2.com"
      }
    },
    "AthenaWorkgroup": {
      "Type": "AWS::Athena::WorkGroup",
      "Properties": {
        "Name": "e2logsworkgroup",
        "Description": "Default Athena Workgroup for E2 logs work",
        "WorkGroupConfiguration": {
          "ResultConfiguration": {
            "OutputLocation": {"Fn::Sub": "s3://${AthenaResultsBucket}"}
          }
        }
      }
    },
    "MysqlRDSSnapshotBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "mysqlsnapshots.everything2.com"
      }
    },
    "MysqlRDSSnapshotRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "e2-rds-snapshot-to-s3-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "rds.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [{
          "PolicyName": "s3-write-to-snapshots",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": {
              "Effect": "Allow",
              "Action": ["s3:*"],
              "Resource": {"Fn::GetAtt": ["MysqlRDSSnapshotBucket", "Arn"]}
            }
          }
        }]
      }
    }

  }
}
