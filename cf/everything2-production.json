{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "E2 production resources",
  "Mappings" : {
    "RegionMap" : {
      "us-east-1" : { "S3hostedzoneID" : "Z3AQBSTGFYJSTF", "websiteendpoint" : "s3-website-us-east-1.amazonaws.com", "ELBAccountID": "127311923021"},
      "us-west-1" : { "S3hostedzoneID" : "Z2F56UZL2M1ACD", "websiteendpoint" : "s3-website-us-west-1.amazonaws.com", "ELBAccountID": "027434742980"},
      "us-west-2" : { "S3hostedzoneID" : "Z3BJ6K6RIION7M", "websiteendpoint" : "s3-website-us-west-2.amazonaws.com", "ELBAccountID": "797873946194"},
      "eu-west-1" : { "S3hostedzoneID" : "Z1BKCTXD74EZPE", "websiteendpoint" : "s3-website-eu-west-1.amazonaws.com", "ELBAccountID": "156460612806"},
      "ap-southeast-1" : { "S3hostedzoneID" : "Z3O0J2DXBE1FTB", "websiteendpoint" : "s3-website-ap-southeast-1.amazonaws.com","ELBAccountID": "114774131450"},
      "ap-southeast-2" : { "S3hostedzoneID" : "Z1WCIGYICN2BYD", "websiteendpoint" : "s3-website-ap-southeast-2.amazonaws.com","ELBAccountID": "783225319266"},
      "ap-northeast-1" : { "S3hostedzoneID" : "Z2M4EHUR26P7ZW", "websiteendpoint" : "s3-website-ap-northeast-1.amazonaws.com","ELBAccountID": "582318560864"},
      "sa-east-1" : { "S3hostedzoneID" : "Z31GFT0UA1I2HV", "websiteendpoint" : "s3-website-sa-east-1.amazonaws.com", "ELBAccountID": "507241528517"}
    },
    "SESIdentity": {
      "us-west-2": { "arn": "arn:aws:ses:us-west-2:254865750963:identity/accounthelp@everything2.com" }
    }
  },
  "Resources": {
    "AssetsS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "assets.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "CFBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "cloudformation.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "OutageBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "outage.everything2.com"
      }
    },
    "NodeBackupBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "nodebackup.everything2.com"
      }
    },
    "StaticAssetBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "static-uswest2.everything2.com"
      }
    },
    "PipelineConfigBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "pipelineconfig.everything2.com"
      }
    },
    "LambdaSourceBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "lambdasource.everything2.com"
      }
    },
    "HomenodeImagesS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "hnimagew.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "PrivateStorageS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "e2configprivate.everything2.com"
      }
    },
    "GlacierS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "glacierstorage.everything2.com"
      }
    },
    "SitemapS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "sitemap.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "JSCSSBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "jscssw.everything2.com",
        "AccessControl": "PublicRead"
      }
    },
    "E2AppRDSAddOnly": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows E2 machines to enable ingress to RDS",
        "ManagedPolicyName": "E2AppRDSAddOnly",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "rds:AuthorizeDBSecurityGroupIngress",
            "Resource": "*"
          }]
        }
      }
    },
    "E2DotComR53Zone": {
      "Type": "AWS::Route53::HostedZone",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "everything2.com"
      }
    },
    "E2DotComJSCSSWR53RR": {
      "Type": "AWS::Route53::RecordSet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "jscssw.everything2.com",
        "HostedZoneName": "everything2.com.",
        "AliasTarget": {
          "HostedZoneId": {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "S3hostedzoneID"]},
          "DNSName": {"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "websiteendpoint"]}
        },
        "Type": "A"
      }
    },
    "AppVPC": {
      "Type": "AWS::EC2::VPC",
      "DeletionPolicy": "Retain",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true
      }
    },
    "AppVPCIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "DeletionPolicy": "Retain"
    },
    "AppVPCIGWAttach": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DeletionPolicy": "Retain",
      "Properties": {
        "InternetGatewayId": { "Ref": "AppVPCIGW" },
        "VpcId": {"Ref": "AppVPC"}
      }
    },
    "ELBFrontendSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "GroupDescription": "E2 App Frontend Security Group",
        "GroupName": "E2-App-Frontend-Security-Group",
        "VpcId": {"Ref": "AppVPC"},
        "SecurityGroupIngress": [
          {
             "FromPort": "80",
             "ToPort": "80",
             "CidrIp": "0.0.0.0/0",
             "IpProtocol": "tcp"
          },
          {
              "FromPort": "443",
              "ToPort": "443",
              "CidrIp": "0.0.0.0/0",
              "IpProtocol": "tcp"
          }
        ]
      }
    },
    "VPCEndpointSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "GroupDescription": "VPC Service Endpoint Security Group",
        "GroupName": "VPC-Service-Endpoint-Security-Group",
        "VpcId": {"Ref": "AppVPC"},
        "SecurityGroupIngress": [
          {
              "FromPort": "443",
              "ToPort": "443",
              "SourceSecurityGroupId": { "Fn::GetAtt": [ "LambdaSecurityGroup", "GroupId"] },
              "IpProtocol": "tcp"
          },
          {
              "FromPort": "443",
              "ToPort": "443",
              "SourceSecurityGroupId": { "Fn::GetAtt": ["E2AppWebheadSecurityGroup", "GroupId"] },
              "IpProtocol": "tcp"
          },
          {
              "FromPort": "443",
              "ToPort": "443",
              "CidrIp": "10.0.0.0/8",
              "IpProtocol": "tcp"
          }
        ]
      }
    },
    "SecretsVPCEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "DeletionPolicy": "Retain",
      "Properties": {
        "PrivateDnsEnabled": true,
        "VpcId": {"Ref": "AppVPC"},
        "VpcEndpointType": "Interface",
        "SubnetIds": [{"Ref": "AppVPCSubnet3"}, {"Ref": "AppVPCSubnet4"}],
        "SecurityGroupIds": [{"Ref": "VPCEndpointSecurityGroup"}],
        "ServiceName": "com.amazonaws.us-west-2.secretsmanager"
      }
    },
    "EventsVPCEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "DeletionPolicy": "Retain",
      "Properties": {
        "PrivateDnsEnabled": true,
        "VpcId": {"Ref": "AppVPC"},
        "VpcEndpointType": "Interface",
        "SubnetIds": [{"Ref": "AppVPCSubnet3"}, {"Ref": "AppVPCSubnet4"}],
        "SecurityGroupIds": [{"Ref": "VPCEndpointSecurityGroup"}],
        "ServiceName": "com.amazonaws.us-west-2.events"
      }
    },
    "LambdaVPCEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "DeletionPolicy": "Retain",
      "Properties": {
        "PrivateDnsEnabled": true,
        "VpcId": {"Ref": "AppVPC"},
        "VpcEndpointType": "Interface",
        "SubnetIds": [{"Ref": "AppVPCSubnet3"}, {"Ref": "AppVPCSubnet4"}],
        "SecurityGroupIds": [{"Ref": "VPCEndpointSecurityGroup"}],
        "ServiceName": "com.amazonaws.us-west-2.lambda"
      }
    },
    "CloudWatchLogsVPCEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "DeletionPolicy": "Retain",
      "Properties": {
        "PrivateDnsEnabled": true,
        "VpcId": {"Ref": "AppVPC"},
        "VpcEndpointType": "Interface",
        "SubnetIds": [{"Ref": "AppVPCSubnet3"}, {"Ref": "AppVPCSubnet4"}],
        "SecurityGroupIds": [{"Ref": "VPCEndpointSecurityGroup"}],
        "ServiceName": "com.amazonaws.us-west-2.logs"
      }
    },
    "S3VPCEndpoint": {
      "Type": "AWS::EC2::VPCEndpoint",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"},
        "VpcEndpointType": "Gateway",
        "ServiceName": "com.amazonaws.us-west-2.s3",
        "RouteTableIds": [{"Ref": "AppVPCRouteTable"}]
      }
    },
    "MainDBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "GroupDescription": "Main Database Security Group",
        "GroupName": "DB-Ingress-Security-Group",
        "VpcId": {"Ref": "AppVPC"},
        "SecurityGroupIngress": [
          {
             "FromPort": "3306",
             "ToPort": "3306",
             "SourceSecurityGroupId": { "Fn::GetAtt": [ "ELBFrontendSecurityGroup", "GroupId"] },
             "IpProtocol": "tcp"
          },
          {
            "FromPort": "3306",
            "ToPort": "3306",
            "SourceSecurityGroupId": {"Fn::GetAtt": ["LambdaSecurityGroup", "GroupId"]},
            "IpProtocol": "tcp"
          }
        ]
      }
    },
    "AppVPCSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"},
        "MapPublicIpOnLaunch": true,
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": "us-west-2a"
      }
    },
    "AppVPCSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"},
        "MapPublicIpOnLaunch": true,
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": "us-west-2b"
      }
    },
    "AppVPCSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"},
        "MapPublicIpOnLaunch": false,
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone": "us-west-2a"
      }
    },
    "AppVPCSubnet4": {
      "Type": "AWS::EC2::Subnet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"},
        "MapPublicIpOnLaunch": false,
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": "us-west-2b"
      }
    },
    "E2ELBCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DomainName": "everything2.com",
        "ValidationMethod": "DNS",
        "SubjectAlternativeNames": ["everything2.net","everything2.org","*.everything2.net","*.everything2.org","*.everything2.com"]
      }
    },
    "E2AppMailerPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the app server to send email from accounthelp@everything2.com",
        "ManagedPolicyName": "E2AppMailerPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "ses:SendEmail",
            "Resource": {"Fn::FindInMap" : [ "SESIdentity", { "Ref" : "AWS::Region" }, "arn"]}
          }]
        }
      }
    },
    "E2AppServerIAMRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
           "Statement": {
             "Effect": "Allow",
             "Principal": {"Service": ["ec2.amazonaws.com","ecs.amazonaws.com"]},
             "Action": "sts:AssumeRole"
           }
        },
        "Description": "Everything2 Application Web Server",
        "ManagedPolicyArns": [
          {"Ref": "E2AppRDSAddOnly"},
          {"Ref": "E2AppS3Policy"},
          {"Ref": "E2AppMailerPolicy"},
          {"Ref": "E2AppSecretsAccessPolicy"},
          {"Ref": "E2AppServerSNSPolicy"},
          {"Ref": "CloudWatchEventsWritePolicy"},
          {"Ref": "SSMPutParameterPolicy"}
        ],
        "Path": "/",
        "RoleName": "E2-App-Server"
      }
    },
    "CloudWatchEventsWritePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the app components to write to the events buses",
        "ManagedPolicyName": "CloudWatchEventsWritePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "events:PutEvents",
            "Resource": "*"
          }]
        }
      }
    },
    "SSMPutParameterPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the app components to write to SSM parameters",
        "ManagedPolicyName": "SSMPutParameterPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "ssm:PutParameter",
            "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
          }]
        }
      }
    },
    "SecretsS3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "secrets.everything2.com"
      }
    },
    "E2AppWebheadSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "GroupDescription": "E2 App Webhead Security Group",
        "GroupName": "E2-App-Webhead-Security-Group",
        "VpcId": {"Ref": "AppVPC"},
        "SecurityGroupIngress": [
          {
            "FromPort": "443",
            "ToPort": "443",
            "SourceSecurityGroupId": { "Fn::GetAtt": [ "ELBFrontendSecurityGroup", "GroupId"] },
            "IpProtocol": "tcp"
          }
        ]
      }
    },
    "E2AppS3Policy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows E2 machines to interact with various S3 buckets",
        "ManagedPolicyName": "E2AppS3Policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["s3:PutObject","s3:DeleteObject","s3:GetObject"],
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "NodeBackupBucket", "Arn"] }, "/*"]]}
          },
          {
            "Effect": "Allow",
            "Action": "s3:PutObject",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "HomenodeImagesS3Bucket", "Arn"] }, "/*"]]}
          },
          {
            "Effect": "Allow",
            "Action": "s3:PutObject",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "JSCSSBucket", "Arn"] }, "/*"]]}
          }]
        }
      }
    },
    "DatabaseBackupSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DisplayName": "Database backup complete",
        "TopicName": "database-backup-complete"
      }
    },
    "E2AppSecretsAccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows app worker to read the appropriate secrets",
        "ManagedPolicyName": "E2AppSecretsAccessPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/recaptcha_v3_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/infected_ips_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/banned_user_agents_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/banned_ips_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/banned_ipblocks_secret"]]}
            },
            {
              "Effect": "Allow",
              "Action": "secretsmanager:GetSecretValue",
              "Resource": {"Ref": "E2DBMasterPassword"}
            },
            {
              "Effect": "Allow",
              "Action": "secretsmanager:ListSecrets",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "E2AppServerSNSPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows E2 machines to list all SNS topics and signal appropriate ones",
        "ManagedPolicyName": "E2AppServerSNSPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "sns:ListTopics",
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "sns:Publish",
            "Resource": { "Ref": "DatabaseBackupSNSTopic"}
          }]
        }
      }
    },
    "EverythingDBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DBSubnetGroupName": "e2-app-db-subnet-group-2",
        "DBSubnetGroupDescription": "E2 VPC RDS DB Subnet Group",
        "SubnetIds": [{"Ref": "AppVPCSubnet3"}, {"Ref": "AppVPCSubnet4"}]
      }
    },
    "EverythingDB": {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AllocatedStorage": "100",
        "AllowMajorVersionUpgrade": true,
        "AvailabilityZone": {"Fn::Join": ["", [{"Ref": "AWS::Region"},"a"]]},
        "BackupRetentionPeriod": 7,
        "DBInstanceClass": "db.t3.medium",
        "DBInstanceIdentifier": "everything2vpc",
        "Engine": "mysql",
        "EngineVersion": "5.7.33",
        "MultiAZ": false,
        "CACertificateIdentifier": "rds-ca-2019",
        "DeletionProtection": true,
        "DBSubnetGroupName": {"Ref": "EverythingDBSubnetGroup"},
        "OptionGroupName": {"Ref": "DB57OptionGroup"},
        "StorageType": "gp2",
        "VPCSecurityGroups": [{"Fn::GetAtt": ["AppVPC","DefaultSecurityGroup"]}, {"Ref": "MainDBSecurityGroup"}],
        "DBParameterGroupName": {"Ref": "EverythingDB57Parameters"},
        "MasterUsername": "everyuser",
        "MasterUserPassword": {"Fn::Join": ["", ["{{resolve:secretsmanager:", {"Ref": "E2DBMasterPassword"}, "::password}}"]]}
      }
    },
    "EverythingDB57Parameters": {
      "Type": "AWS::RDS::DBParameterGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Enables stored procedures for E2 on mysql 5.7",
        "Family": "mysql5.7",
        "Parameters": {
          "innodb_flush_log_at_trx_commit": 1,
          "log_bin_trust_function_creators": 1,
          "explicit_defaults_for_timestamp": 0,
          "long_query_time": 3
        }
      }
    },
    "DB56OptionGroup": {
      "Type": "AWS::RDS::OptionGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "EngineName": "mysql",
        "MajorEngineVersion": "5.6",
        "OptionGroupDescription": "mysql-5.6 default option group",
        "OptionConfigurations": []
      }
    },
    "DB57OptionGroup": {
      "Type": "AWS::RDS::OptionGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "EngineName": "mysql",
        "MajorEngineVersion": "5.7",
        "OptionGroupDescription": "mysql-5.7 default option group",
        "OptionConfigurations": []
      }
    },
    "E2DBMasterPassword": {
      "Type": "AWS::SecretsManager::Secret",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Username and password for the E2 database",
        "Name": "E2DBMasterPassword",
        "GenerateSecretString": {
          "SecretStringTemplate": "{\"username\": \"everyuser\"}",
          "GenerateStringKey": "password",
          "PasswordLength": 16,
          "ExcludeCharacters": "\"@/\\"
        }
      }
    },
    "E2MasterPasswordAttachment": {
      "Type" : "AWS::SecretsManager::SecretTargetAttachment",
      "DeletionPolicy": "Retain",
      "Properties": {
        "SecretId": {"Ref": "E2DBMasterPassword" },
        "TargetId": {"Ref": "EverythingDB"},
        "TargetType": "AWS::RDS::DBInstance"
      }
    },
    "E2AppInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "DeletionPolicy": "Retain",
      "Properties": {
        "InstanceProfileName": "E2AppInstanceProfile",
        "Roles": [{"Ref": "E2AppServerIAMRole"}]
      }
    },
    "PerlLambdaBaseBuildSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DisplayName": "Perl Lambda base build complete",
        "TopicName": "perl-lambda-base-build-complete"
      }
    },
    "PerlLambdaBaseBuildRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Subscribing to perl lambda base build",
        "Name": "perllambdabuildrule",
        "EventPattern": {
          "source": ["aws.codebuild"],
          "detail-type": ["CodeBuild Build State Change"],
          "detail": {
            "build-status": [
              "SUCCEEDED",
              "FAILED"
            ],
            "project-name": [{"Ref": "PerlLambdaCodeBuildProject"}]
          }
        },
        "Targets": [{
          "Arn": {"Ref": "PerlLambdaBaseBuildSNSTopic"},
          "Id": "perl-lambda-codebuild-to-sns"
        }]
      }
    },
    "PerlLambdaBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "perllambdabase.everything2.com"
      }
    },
    "PerlLambdaBucketWritePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows E2 processes to upload to the perl lambda base bucket",
        "ManagedPolicyName": "PerlLambdaBucketWritePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["s3:PutObject","s3:GetObject"],
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "PerlLambdaBucket", "Arn"] }, "/*"]]}
          }]
        }
      }
    },
    "ZipsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "githubzips.everything2.com"
      }
    },
    "ZipsBucketWritePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows E2 processes to upload to the zips bucket",
        "ManagedPolicyName": "ZipsBucketWritePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "s3:PutObject",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "ZipsBucket", "Arn"] }, "/*"]]}
          }]
        }
      }
    },
    "ZipsBucketReadPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows E2 process to read from the zips bucket",
        "ManagedPolicyName": "ZipsBucketReadPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "s3:GetObject",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "ZipsBucket", "Arn"] }, "/*"]]}
          }]
        }
      }
    },
    "ZipsLambdaInvokerPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the webhooks receiver lambda to call the github pull handler",
        "ManagedPolicyName": "ZipsLambdaInvokerPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "lambda:InvokeFunction",
            "Resource": {"Fn::GetAtt" : ["LambdaZipsPuller", "Arn"]}
          }]
        }
      }
    },
    "ReadGithubSecretPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows worker to read the current Github Webhook secret",
        "ManagedPolicyName": "ReadGithubSecretPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{"Fn::GetAtt": ["SecretsS3Bucket", "Arn"]}, "/github_webhook_secret"]]}
            }
          ]
        }
      }
    },
    "InvokeWebhookReceiverPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows worker to invoke the webhooks receiver function",
        "ManagedPolicyName": "InvokeWebhookReceiverPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "lambda:InvokeFunction",
              "Resource": {"Fn::GetAtt" : ["LambdaWebhookReceiver", "Arn"]}
            }
          ]
        }
      }
    },
    "WebhooksAPIGatewayRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "apigateway.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "CI/CD webhook receiver for build pipeline",
        "ManagedPolicyArns": [
            {"Ref": "InvokeWebhookReceiverPolicy"}
        ],
        "Path": "/",
        "RoleName": "Webhooks-APIGateway-Role"
      }
    },
    "LambdaZipsWriterRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
           "Statement": {
             "Effect": "Allow",
             "Principal": {"Service": "lambda.amazonaws.com"},
             "Action": "sts:AssumeRole"
           }
        },
        "Description": "CI/CD zips creater for build pipeline",
        "ManagedPolicyArns": [
          {"Ref": "ZipsBucketWritePolicy"},
          {"Ref": "InvokeEverything2ZipfileProcessorPolicy"},
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/",
        "RoleName": "CICD-Zips-Role"
      }
    },
    "LambdaWebhookReceiverRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
           "Statement": {
             "Effect": "Allow",
             "Principal": {"Service": "lambda.amazonaws.com"},
             "Action": "sts:AssumeRole"
           }
        },
        "Description": "CI/CD zips creater for build pipeline",
        "ManagedPolicyArns": [
          {"Ref": "ZipsLambdaInvokerPolicy"},
          {"Ref": "ReadGithubSecretPolicy"},
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/",
        "RoleName": "Webhook-Receiver-Role"
      }
    },
    "LambdaZipsPuller": {
      "Type": "AWS::Lambda::Function",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Code": {
          "S3Bucket": "lambdasource.everything2.com",
          "S3Key": "cicd-zips-puller.zip"
        },
        "FunctionName": "cicd-zips-puller",
        "Role": {"Fn::GetAtt" : ["LambdaZipsWriterRole", "Arn"]},
        "Runtime": "ruby2.7",
        "Timeout": "120",
        "MemorySize": 512,
        "Handler": "handler.lambda_handler"
      }
    },
    "LambdaWebhookReceiverPermission": {
      "Type": "AWS::Lambda::Permission",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {"Fn::GetAtt": ["LambdaWebhookReceiver","Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "Action": "lambda:InvokeFunction",
        "SourceArn": { "Fn::Join": [ "", ["arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":",{ "Ref": "AWS::AccountId" }, ":",{ "Ref": "WebhooksAPIGateway" },"/*/*/newpush"] ] }
      }
    },
    "WebhooksAPIGateway": {
      "Type": "AWS::ApiGatewayV2::Api",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FailOnWarnings": true,
        "Body": {
          "openapi": "3.0.3",
          "info": {
            "title": "E2 CICD Webhooks API",
            "description": "This is the Webhooks frontend for GitHub integration into E2 deployment",
            "contact": {
              "name": "Account Help",
              "email": "accounthelp@everything2.com"
            },
            "version": "1.0.1"
          },
          "servers": [
          {
            "url": "https://webhooks.everything2.com",
            "description": "Production server"
          }],
          "paths": {
            "/newpush": {
              "post": {
                "description": "Accepts a webhook from GitHub",
                "responses": {
                  "200": {
                    "description": "Acceptance of request"
                  }
                },
                "x-amazon-apigateway-integration": {
                  "credentials": {"Fn::GetAtt" : ["WebhooksAPIGatewayRole", "Arn"]},
                  "type": "AWS_PROXY",
                  "httpMethod": "POST",
                  "uri": {"Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaWebhookReceiver.Arn}/invocations"},
                  "payloadFormatVersion": "1.0"
                }
              }
            }
          }
        }
      }
    },
    "WebhooksAPIGatewayCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DomainName": "webhooks.everything2.com",
        "ValidationMethod": "DNS"
      }
    },
    "WebhooksAPIGatewayDomain": {
      "Type": "AWS::ApiGatewayV2::DomainName",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DomainName": "webhooks.everything2.com",
        "DomainNameConfigurations": [
          {
            "CertificateArn": {"Ref": "WebhooksAPIGatewayCertificate"},
            "CertificateName": "webhooks.everything2.com",
            "EndpointType": "REGIONAL"
          }
        ]
      }
    },
    "WebhooksAPIBasePath": {
      "Type": "AWS::ApiGatewayV2::ApiMapping",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DomainName": {"Ref": "WebhooksAPIGatewayDomain"},
        "ApiId": {"Ref": "WebhooksAPIGateway"},
        "Stage": {"Ref": "WebhooksAPIProduction"},
        "ApiMappingKey": ""
      }
    },
     "WebhooksAPIGatewayRR": {
      "Type": "AWS::Route53::RecordSet",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "webhooks.everything2.com",
        "HostedZoneName": "everything2.com.",
        "AliasTarget": {
          "DNSName": {"Fn::GetAtt": ["WebhooksAPIGatewayDomain", "RegionalDomainName"]},
          "HostedZoneId": {"Fn::GetAtt": ["WebhooksAPIGatewayDomain", "RegionalHostedZoneId"]},
          "EvaluateTargetHealth": false
        },
        "Type": "A"
      }
    },
    "LambdaWebhookReceiver": {
      "Type": "AWS::Lambda::Function",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Code": {
          "S3Bucket": "lambdasource.everything2.com",
          "S3Key": "webhooks-receiver.zip"
        },
        "FunctionName": "webhooks-receiver",
        "Role": {"Fn::GetAtt" : ["LambdaWebhookReceiverRole", "Arn"]},
        "Runtime": "ruby2.7",
        "Timeout": "30",
        "Handler": "handler.lambda_handler"
      }
    },
    "WebhooksAPILogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "LambdaWebhookReceiver"}]]},
        "RetentionInDays": 3
      }
    },
    "WebhooksAPIGatewayLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/apigateway/webhooks-production",
        "RetentionInDays": 3
      }
    },
    "CICDLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "LambdaZipsPuller"}]]},
        "RetentionInDays": 3
      }
    },
    "Everything2ZipfileProcessorGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "Everything2ZipfileProcessorLambda"}]]},
        "RetentionInDays": 3
      }
    },
    "WebhooksAPIProduction": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Production Stage",
        "StageName": "production",
        "ApiId": {"Ref": "WebhooksAPIGateway"},
        "AutoDeploy": true,
        "AccessLogSettings": {
          "DestinationArn": {"Fn::GetAtt": ["WebhooksAPIGatewayLogGroup","Arn"]},
          "Format": "{\"requestId\":\"$context.requestId\", \"domain\": \"$context.domainName\", \"ip\": \"$context.identity.sourceIp\", \"requestTime\":\"$context.requestTime\", \"routeKey\":\"$context.routeKey\", \"status\":\"$context.status\", \"error\":\"$context.error.message\", \"int_error\":\"$context.integrationErrorMessage\"}"
        }
      }
    },
    "WebhooksAPIGatewayDeployment": {
      "Type" : "AWS::ApiGatewayV2::Deployment",
      "DeletionPolicy": "Retain",
      "Properties" : {
        "Description" : "Production Deployment",
        "ApiId" : {"Ref": "WebhooksAPIGateway"},
        "StageName" : {"Ref": "WebhooksAPIProduction"}
      }
    },
    "WebhookReceivedSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DisplayName": "Github Webhook Received",
        "TopicName": "webhook-received"
      }
    },
    "PerlLambdaCodeBuildLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/codebuild/perllambda",
        "RetentionInDays": 3
      }
    },
    "PerlLambdaCodeBuildLogWritePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows E2 processes to write to the perl lambda builder log group",
        "ManagedPolicyName": "PerlLambdaCodeBuildLogWritePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "PerlLambdaCodeBuildLogGroup", "Arn"] }, ":*"]]}
          },
          {
            "Effect": "Allow",
            "Action": "logs:CreateLogStream",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "PerlLambdaCodeBuildLogGroup", "Arn"] }, ":*"]]}
          }]
        }
      }
    },
    "PerlLambdaCodeUpdatePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows codebuild to update lamda code once built",
        "ManagedPolicyName": "PerlLambdaCodeUpdatePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "lambda:PublishLayerVersion",
            "Resource": {"Fn::Join": ["",["arn:aws:lambda:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":layer:e2-perl-layer"]]}
          }]
        }
      }
    },
    "PerlLambdaCodeBuildRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "codebuild.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Perl lambda base CodeBuild role",
        "ManagedPolicyArns": [
            {"Ref": "PerlLambdaBucketWritePolicy"},
            {"Ref": "ZipsBucketReadPolicy"},
            {"Ref": "PerlLambdaCodeBuildLogWritePolicy"},
            {"Ref": "PerlLambdaCodeUpdatePolicy"},
            {"Ref": "CodeBuildInvokeLambdaLayerUpdaterPolicy"}
        ],
        "Path": "/",
        "RoleName": "PerlLambda-CodeBuild-Role"
      }
    },
    "PerlLambdaCodeBuildProject": {
      "Type": "AWS::CodeBuild::Project",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "LogsConfig": {
          "CloudWatchLogs": {
            "Status": "ENABLED",
            "GroupName": {"Ref": "PerlLambdaCodeBuildLogGroup"}
          }
        },
        "Name": "Perl-Lambda-Builder",
        "ServiceRole": {"Ref": "PerlLambdaCodeBuildRole"},
        "Source": {
          "Type": "S3",
          "BuildSpec": "serverless/buildspec.yml",
          "Location": {"Fn::Join" : ["/",[{ "Ref": "ZipsBucket"}, "everything2.zip"]]}
        },
        "TimeoutInMinutes": 90,
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/amazonlinux2-x86_64-standard:3.0",
          "Type": "LINUX_CONTAINER"
        }
      }
    },
    "Everything2ZipfileProcessorRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "lambda.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Everything2 Zipfile Processor Lambda Role",
        "ManagedPolicyArns": [
            {"Ref": "ZipsBucketReadPolicy"},
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/",
        "RoleName": "Everything2-Zipfile-Processor-Role"
      }
    },
    "Everything2ZipfileProcessorLambda": {
      "Type": "AWS::Lambda::Function",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Code": {
          "S3Bucket": "lambdasource.everything2.com",
          "S3Key": "everything2-zipfile-processor.zip"
        },
        "FunctionName": "everything2-zipfile-processor",
        "Role": {"Fn::GetAtt" : ["Everything2ZipfileProcessorRole", "Arn"]},
        "Runtime": "ruby2.7",
        "MemorySize": 350,
        "Timeout": "600",
        "Handler": "handler.lambda_handler"
      }
    },
    "InvokeEverything2ZipfileProcessorPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the zipfile handler lambda to call the everything2 specific jobs",
        "ManagedPolicyName": "InvokeEverything2ZipfileProcessorPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "lambda:InvokeFunction",
            "Resource": {"Fn::GetAtt" : ["Everything2ZipfileProcessorLambda", "Arn"]}
          }]
        }
      }
    },
    "CloudWatchSNSPolicy": {
      "Type": "AWS::SNS::TopicPolicy",
      "Properties": {
        "Topics": [
          {"Ref": "PerlLambdaBaseBuildSNSTopic"}
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Sid" : "CloudWatchEventsPublishAllow",
            "Effect" : "Allow",
            "Resource" : "*",
            "Action" : "sns:Publish",
            "Principal" : {
              "Service" : "events.amazonaws.com"
            }
          }]
        }
      }
    },
    "PerlLambdaLayer": {
      "Type": "AWS::Lambda::LayerVersion",
      "DeletionPolicy": "Retain",
      "Properties": {
        "CompatibleRuntimes": ["provided.al2"],
        "Content": {
          "S3Bucket": "perllambdabase.everything2.com",
          "S3Key": "e2serverless.zip"
        },
        "LayerName": "e2-perl-layer",
        "Description": "Perl layer for E2"
      }
    },
    "CICDLambdaUpdaterPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the lambda processor to update the code of lambda funcions, both ruby and perl",
        "ManagedPolicyName": "CICDLambdaUpdaterPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "lambda:ListFunctions",
            "Resource": "*"
          }]
        }
      }
    },
    "CICDPerlBaseVersionUpdaterPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows a lambda processor to update the perl layer version across all of the lambda functions",
        "ManagedPolicyName": "CICDPerlBaseUpdaterPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["lambda:ListFunctions","lambda:UpdateFunctionConfiguration","lambda:ListLayerVersions","lambda:GetLayerVersion", "lambda:DeleteLayerVersion"],
            "Resource": "*"
          },
          {
            "Effect": "Allow",
            "Action": "lambda:ListLayerVersions",
            "Resource": {"Fn::Join": ["",["arn:aws:lambda:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":layer:e2-perl-layer"]]}
          },
          {
            "Effect": "Allow",
            "Action": "lambda:DeleteLayerVersion",
            "Resource": {"Fn::Join": ["",["arn:aws:lambda:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":layer:e2-perl-layer:*"]]}
          }]
        }
      }
    },
    "CICDPerlBaseVersionUpdaterLambdaRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
           "Statement": {
             "Effect": "Allow",
             "Principal": {"Service": "lambda.amazonaws.com"},
             "Action": "sts:AssumeRole"
           }
        },
        "Description": "CI/CD zips creater for build pipeline",
        "ManagedPolicyArns": [
          {"Ref": "CICDPerlBaseVersionUpdaterPolicy"},
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/",
        "RoleName": "CICD-Perl-Base-Version-Updater-Role"
      }
    },
    "CICDCodeBuildPerlBaseVersionUpdaterLambda": {
      "Type": "AWS::Lambda::Function",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Code": {
          "S3Bucket": "lambdasource.everything2.com",
          "S3Key": "cicd-codebuild-perl-layer-publisher.zip"
        },
        "FunctionName": "cicd-codebuild-perl-layer-publisher",
        "Role": {"Fn::GetAtt" : ["CICDPerlBaseVersionUpdaterLambdaRole", "Arn"]},
        "Runtime": "ruby2.7",
        "Timeout": "30",
        "Handler": "handler.lambda_handler"
      }
    },
    "CodeBuildInvokeLambdaLayerUpdaterPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows a lambda processor to update the perl layer version across all of the lambda functions",
        "ManagedPolicyName": "CodeBuildInvokeLambdaLayerUpdaterPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["lambda:InvokeFunction"],
            "Resource": {"Fn::GetAtt": ["CICDCodeBuildPerlBaseVersionUpdaterLambda", "Arn"]}
          }]
        }
      }
    },
    "PerlBaseLayerUpdaterLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "CICDCodeBuildPerlBaseVersionUpdaterLambda"}]]},
        "RetentionInDays": 3
      }
    },
    "EverythingLibraryLayerPublishVersionPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows a lambda processor to update the everything library layer",
        "ManagedPolicyName": "EverythingLibraryLayerPublishVersionPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["lambda:PublishLayerVersion"],
            "Resource": {"Fn::Join": ["",["arn:aws:lambda:",{"Ref": "AWS::Region"},":",{"Ref": "AWS::AccountId"},":layer:e2-library-layer"]]}
          }]
        }
      }
    },
    "CICDE2LibraryLayerBuilderLambdaRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
           "Statement": {
             "Effect": "Allow",
             "Principal": {"Service": "lambda.amazonaws.com"},
             "Action": "sts:AssumeRole"
           }
        },
        "Description": "CI/CD E2 library lambda layer builder",
        "ManagedPolicyArns": [
          {"Ref": "ZipsBucketReadPolicy"},
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          {"Ref": "E2LibLambdaBucketWriter"},
          {"Ref": "EverythingLibraryLayerPublishVersionPolicy"}
        ],
        "Path": "/",
        "RoleName": "CICD-E2-Library-Layer-Builder-Role"
      }
    },
    "CICDE2LibraryLayerBuilderLambda": {
      "Type": "AWS::Lambda::Function",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Code": {
          "S3Bucket": "lambdasource.everything2.com",
          "S3Key": "everything2-library-layer-builder.zip"
        },
        "FunctionName": "everything2-library-layer-builder",
        "Role": {"Fn::GetAtt" : ["CICDE2LibraryLayerBuilderLambdaRole", "Arn"]},
        "Runtime": "ruby2.7",
        "MemorySize": 1024,
        "Timeout": "600",
        "Handler": "handler.lambda_handler"
      }
    },
    "CICDE2LibraryLayerBuilderLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "CICDE2LibraryLayerBuilderLambda"}]]},
        "RetentionInDays": 3
      }
    },
    "E2LibLambdaBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "e2liblambdabase.everything2.com"
      }
    },
    "E2LibLambdaBucketWriter": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the E2 library layer builder to upload to the storage bucket",
        "ManagedPolicyName": "E2LibLambdaBucketWriter",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["s3:PutObject","s3:GetObject"],
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "E2LibLambdaBucket", "Arn"] }, "/*"]]}
          }]
        }
      }
    },
    "E2LibLambdaLayer": {
      "Type": "AWS::Lambda::LayerVersion",
      "DeletionPolicy": "Retain",
      "Properties": {
        "CompatibleRuntimes": ["provided.al2"],
        "Content": {
          "S3Bucket": "e2liblambdabase.everything2.com",
          "S3Key": "everything2-library-layer.zip"
        },
        "LayerName": "e2-library-layer",
        "Description": "Application Library layer for E2"
      }
    },
    "VPCLambdaCreateInterfacePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows Lambda to create network interfaces",
        "ManagedPolicyName": "VPCLambdaCreateInterfacePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": "*",
              "Action": [
                "ec2:DescribeInstances",
                "ec2:CreateNetworkInterface",
                "ec2:DeleteNetworkInterface",
                "ec2:AttachNetworkInterface",
                "ec2:DetachNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "autoscaling:CompleteLifecycleAction",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs"
              ]
           }
         ]
        }
      }
    },
    "SitemapBucketWritePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows entites to write to the sitemaps bucket",
        "ManagedPolicyName": "SitemapBucketWritePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:PutObject","s3:DeleteObject"],
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SitemapS3Bucket", "Arn"] }, "/*"]]}
            }
          ]
        }
      }
    },
    "LambdaSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "E2 Lambda Security Group",
        "GroupName": "E2-Lambda-Security-Group",
        "VpcId": {"Ref": "AppVPC"}
      }
    },
    "AppErrorsEventBus": {
      "Type": "AWS::Events::EventBus",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "com.everything2.errors"
      }
    },
    "AppUninitializedValuesEventBus": {
      "Type": "AWS::Events::EventBus",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "com.everything2.uninitialized"
      }
    },
    "ApplicationUninitializedValuesArchive": {
      "Type": "AWS::Events::Archive",
      "DeletionPolicy": "Retain",
      "Properties": {
        "ArchiveName": "e2-app-uninitialized-archive",
        "Description": "Archiving app uninits",
        "RetentionDays": 3,
        "SourceArn": {"Fn::GetAtt": ["AppUninitializedValuesEventBus", "Arn"]}
      }
    },
    "ApplicationUninitializedValueLoggingRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Subscribing to E2 app uninitialized values",
        "Name": "e2-app-uninitialized-values-rule",
        "EventBusName": {"Fn::GetAtt": ["AppUninitializedValuesEventBus", "Name"]},
        "EventPattern": {"source": ["e2.webapp"], "detail-type": ["E2 Application Error"]},
        "Targets": [{
          "Arn": {"Fn::GetAtt": ["AppUninitializedLogGroup","Arn"]},
          "Id": "app-uninitialized-values-rule"
        }]
      }
    },
    "AppErrorsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/events/e2-app-errors",
        "RetentionInDays": 3
      }
    },
    "AppUninitializedLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/events/e2-uninitialized-errors",
        "RetentionInDays": 3
      }
    },
    "ApplicationErrorLoggingRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Subscribing to E2 app errors",
        "Name": "e2-app-errors-rule",
        "EventBusName": {"Fn::GetAtt": ["AppErrorsEventBus", "Name"]},
        "EventPattern": {"source": ["e2.webapp"], "detail-type": ["E2 Application Error"]},
        "Targets": [{
          "Arn": {"Fn::GetAtt": ["AppErrorsLogGroup","Arn"]},
          "Id": "Id1844360018781"
        }]
      }
    },
    "ApplicationEventsArchive": {
      "Type": "AWS::Events::Archive",
      "Properties": {
        "ArchiveName": "e2-app-errors-archive",
        "Description": "Archiving app errors",
        "RetentionDays": 3,
        "SourceArn": {"Fn::GetAtt": ["AppErrorsEventBus", "Arn"]}
      }
    },
    "AppVPCRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "AppVPC"}
      }
    },
    "AppVPCS3SubnetAssociation3": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "AppVPCRouteTable"},
        "SubnetId": {"Ref": "AppVPCSubnet3"}
      }
    },
    "AppVPCS3SubnetAssociation4": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {"Ref": "AppVPCRouteTable"},
        "SubnetId": {"Ref": "AppVPCSubnet4"}
      }
    },
    "DatabaseOnlyLambdaRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "lambda.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Role for Lambdas that only interact with the database",
        "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            {"Ref": "VPCLambdaCreateInterfacePolicy"},
            {"Ref": "E2AppSecretsAccessPolicy"},
            {"Ref": "CloudWatchEventsWritePolicy"}
        ],
        "Path": "/",
        "RoleName": "Database-Only-Lambda-Role"
      }
    },
    "WriteupReaperFunction": {
      "Type": "AWS::Lambda::Function",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Code": {
          "S3Bucket": "lambdasource.everything2.com",
          "S3Key": "writeup-reaper.zip"
        },
        "FunctionName": "writeup-reaper",
        "Role": {"Fn::GetAtt" : ["DatabaseOnlyLambdaRole", "Arn"]},
        "Layers": [
          {"Fn::Join": ["",["arn:aws:lambda:us-west-2:",{"Ref": "AWS::AccountId"},":layer:e2-library-layer:18"]]},
          {"Fn::Join": ["",["arn:aws:lambda:us-west-2:",{"Ref": "AWS::AccountId"},":layer:e2-perl-layer:44"]]}
        ],
        "Runtime": "provided.al2",
        "Timeout": "400",
        "MemorySize": 750,
        "Handler": "handler.lambda_handler",
        "VpcConfig": {
          "SecurityGroupIds": [{ "Fn::GetAtt": [ "LambdaSecurityGroup", "GroupId"] }],
          "SubnetIds": [{"Ref": "AppVPCSubnet3"}]
        }
      }
    },
    "WriteupReaperLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": {"Fn::Join": ["", ["/aws/lambda/", {"Ref": "WriteupReaperFunction"}]]},
        "RetentionInDays": 3
      }
    },
    "WriteupReaperCronRule": {
      "Type": "AWS::Events::Rule",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Cron rule to call writeup reaper",
        "Name": "writeup-reaper-cron",
        "State": "ENABLED",
        "ScheduleExpression": "cron(50 6 * * ? *)",
        "Targets": [{
          "Id": "writeup-reaper-arn",
          "Arn": {"Fn::GetAtt" : ["WriteupReaperFunction", "Arn"]}
        }]
      }
    },
    "WriteupReaperLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName" : {"Ref": "WriteupReaperFunction"},
        "Principal": "events.amazonaws.com",
        "Action": "lambda:InvokeFunction",
        "SourceArn" : {"Fn::GetAtt" : ["WriteupReaperCronRule", "Arn"]}
      }
    },
    "E2AppECRRegistry": {
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": "everything2/e2app",
        "LifecyclePolicy": {
          "LifecyclePolicyText": "{\"rules\": [{\"rulePriority\": 1, \"description\": \"Expire images older than 3 days\", \"selection\": {\"tagStatus\": \"untagged\", \"countType\": \"sinceImagePushed\",\"countUnit\": \"days\", \"countNumber\": 3 }, \"action\": {\"type\": \"expire\"}}]}"
        }
      }
    },
    "CodeBuildUpdateApplicationECRRegistry": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows the codebuild job to update the ECR Registry",
        "ManagedPolicyName": "CodeBuildECRPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": [
              "ecr:BatchCheckLayerAvailability",
              "ecr:BatchGetImage",
              "ecr:GetDownloadUrlForLayer",
              "ecr:GetRepositoryPolicy",
              "ecr:Describe*",
              "ecr:List*",
              "ecr:CompleteLayerUpload",
              "ecr:GetAuthorizationToken",
              "ecr:InitiateLayerUpload",
              "ecr:PutImage",
              "ecr:UploadLayerPart"
            ],
            "Resource": "*"
          }]
        }
      }
    },
    "ApplicationDockerCodeBuildRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "codebuild.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Docker builder CodeBuild role",
        "ManagedPolicyArns": [
            {"Ref": "CodeBuildUpdateApplicationECRRegistry"},
            {"Ref": "DockerCodeBuildLogWritePolicy"},
            {"Ref": "ZipsBucketReadPolicy"},
            {"Ref": "BuildcacheAccessPolicy"},
            {"Ref": "DockerHubSecretsAccessPolicy"}
        ],
        "Path": "/",
        "RoleName": "Docker-Builder-CodeBuild-Role"
      }
    },
    "DockerCodeBuildProject": {
      "Type": "AWS::CodeBuild::Project",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Artifacts": {
          "Type": "NO_ARTIFACTS"
        },
        "LogsConfig": {
          "CloudWatchLogs": {
            "Status": "ENABLED",
            "GroupName": {"Ref": "DockerCodeBuildLogGroup"}
          }
        },
        "Name": "E2-Application-Builder",
        "ServiceRole": {"Ref": "ApplicationDockerCodeBuildRole"},
        "Source": {
          "Type": "S3",
          "BuildSpec": "docker/buildspec.yml",
          "Location": {"Fn::Join" : ["/",[{ "Ref": "ZipsBucket"}, "everything2.zip"]]}
        },
        "TimeoutInMinutes": 90,
        "Environment": {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/standard:4.0",
          "Type": "LINUX_CONTAINER",
          "EnvironmentVariables": [
            {
              "Name": "AWS_REGION",
              "Value": {"Ref": "AWS::Region"}
            },
            {
              "Name": "AWS_ACCOUNT_ID",
              "Value": {"Ref": "AWS::AccountId"}
            },
            {
              "Name": "IMAGE_TAG",
              "Value": "latest"
            },
            {
              "Name": "BUILDCACHE_BUCKET",
              "Value": {"Ref": "BuildcacheBucket"}
            },
            {
              "Name": "SECRETS_BUCKET",
              "Value": {"Ref": "SecretsS3Bucket"} 
            }
          ],
          "PrivilegedMode": true
        },
        "Cache": {
          "Location": "LOCAL",
          "Type": "LOCAL",
          "Modes": [LOCAL_DOCKER_LAYER_CACHE]
        }
      }
    },
    "DockerCodeBuildLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "LogGroupName": "/aws/codebuild/dockerbuild",
        "RetentionInDays": 3
      }
    },
    "DockerCodeBuildLogWritePolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows CodeBuild to write to the log group",
        "ManagedPolicyName": "DockerCodeBuildLogWritePolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": "logs:PutLogEvents",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "DockerCodeBuildLogGroup", "Arn"] }, ":*"]]}
          },
          {
            "Effect": "Allow",
            "Action": "logs:CreateLogStream",
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "DockerCodeBuildLogGroup", "Arn"] }, ":*"]]}
          }]
        }
      }
    },
    "DockerHubSecretsAccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows CodeBuild worker to read the Docker Hub secrets so it can fetch the Ubuntu secret",
        "ManagedPolicyName": "DockerHubSecretsAccessPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "s3:GetObject",
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "SecretsS3Bucket", "Arn"] }, "/docker_hub_password"]]}
            }
          ]
        }
      }
    },
    "BuildcacheBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "buildcache.everything2.com"
      }
    },
    "BuildcacheAccessPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Ability to access the buildcache bucket",
        "ManagedPolicyName": "BuildcacheAccessPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:GetObject","s3:DeleteObject","s3:PutObject"],
              "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "BuildcacheBucket", "Arn"] }, "/*"]]}
            },
            {
              "Effect": "Allow",
              "Action": ["s3:ListBucket"],
              "Resource": {"Fn::GetAtt": ["BuildcacheBucket", "Arn"]}
            }
          ]
        }
      }
    },
    "ECSServiceLinkedRole": {
      "Type": "AWS::IAM::ServiceLinkedRole",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AWSServiceName": "ecs.amazonaws.com",
        "Description": "Role to enable Amazon ECS to manage your cluster."
      }
    },
    "ECSAppCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "CapacityProviders": ["FARGATE","FARGATE_SPOT"],
        "ClusterName": "E2-App-ECS-Cluster" 
      }
    },
    "ELBLogsBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "elblogs.everything2.com",
        "LifecycleConfiguration": {
          "Rules": [{
            "Id": "DeleteAfter30",
            "Status": "Enabled",
            "ExpirationInDays": "30"
          }]
        }
      }
    },
    "ELBLogsSystemAccessPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Bucket": {"Ref": "ELBLogsBucket"},
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "AWS": {"Fn::Join": ["",["arn:aws:iam::",{"Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "ELBAccountID"]},":root"]]}
            },
            "Action": "s3:PutObject",
            "Resource": {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "ELBLogsBucket"},"/AWSLogs/",{"Ref": "AWS::AccountId"},"/*"]]}
          },
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "delivery.logs.amazonaws.com"
            },
            "Action": "s3:PutObject",
            "Resource": {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "ELBLogsBucket"}, "/AWSLogs/",{"Ref": "AWS::AccountId"},"/*"]]},
            "Condition": {
              "StringEquals": {
                "s3:x-amz-acl": "bucket-owner-full-control"
              }
            }
          },
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "delivery.logs.amazonaws.com"
            },
            "Action": "s3:GetBucketAcl",
            "Resource": {"Fn::Join": ["",["arn:aws:s3:::",{"Ref": "ELBLogsBucket"}]]}
          }]
        } 
      }
    },
    "NodepackBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": "nodepack.everything2.com"
      }
    },
    "NodepackS3Policy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Description": "Allows nodepack lambda jobs to interact with the nodepack bucket",
        "ManagedPolicyName": "NodepackS3Policy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
          {
            "Effect": "Allow",
            "Action": ["s3:PutObject","s3:DeleteObject","s3:GetObject"],
            "Resource": {"Fn::Join" : ["",[{ "Fn::GetAtt": [ "NodepackBucket", "Arn"] }, "/*"]]}
          },
          {
            "Effect": "Allow",
            "Action": "s3:ListBucket",
            "Resource": {"Fn::GetAtt": ["NodepackBucket", "Arn"]}
          }]
        }
      }
    },
    "NodepackLambdaRole": {
      "Type": "AWS::IAM::Role",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "lambda.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Role for Nodepack Lambda",
        "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
            {"Ref": "VPCLambdaCreateInterfacePolicy"},
            {"Ref": "E2AppSecretsAccessPolicy"},
            {"Ref": "CloudWatchEventsWritePolicy"},
            {"Ref": "NodepackS3Policy"}
        ],
        "Path": "/",
        "RoleName": "Nodepack-Lambda-Role"
      }
    },
    "NodepackBuilderFunction": {
      "Type": "AWS::Lambda::Function",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Code": {
          "S3Bucket": "lambdasource.everything2.com",
          "S3Key": "nodepack-builder.zip"
        },
        "Description": "On-demand function to upload the latest nodepack to S3",
        "FunctionName": "nodepack-builder",
        "Role": {"Fn::GetAtt" : ["NodepackLambdaRole", "Arn"]},
        "Layers": [
          {"Fn::Join": ["",["arn:aws:lambda:us-west-2:",{"Ref": "AWS::AccountId"},":layer:e2-library-layer:18"]]},
          {"Fn::Join": ["",["arn:aws:lambda:us-west-2:",{"Ref": "AWS::AccountId"},":layer:e2-perl-layer:44"]]}
        ],
        "Runtime": "provided.al2",
        "Timeout": "400",
        "MemorySize": 750,
        "Handler": "handler.lambda_handler",
        "VpcConfig": {
          "SecurityGroupIds": [{ "Fn::GetAtt": [ "LambdaSecurityGroup", "GroupId"] }],
          "SubnetIds": [{"Ref": "AppVPCSubnet3"}]
        }
      }
    },
    "E2AppFargateTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Cpu": 1024,
        "Memory": 3072,
        "Family": "e2app-family",
        "ExecutionRoleArn": {"Ref": "E2TaskExecutionRole"},
        "RequiresCompatibilities": ["FARGATE"],
        "NetworkMode": "awsvpc",
        "RuntimePlatform": {
          "CpuArchitecture": "X86_64",
          "OperatingSystemFamily": "LINUX"
        },
        "TaskRoleArn": {"Ref": "AppFargateTaskRole"},
        "ContainerDefinitions": [{
          "Name": "e2app",
          "Image": {"Fn::Join": [":",[{"Fn::GetAtt": ["E2AppECRRegistry","RepositoryUri"]},"latest"]]},
          "Memory": 3072,
          "Essential": true,
          "HealthCheck": {
            "Interval": 30,
            "Retries": 3,
            "StartPeriod": 20,
            "Timeout": 5,
            "Command": ["CMD-SHELL","curl -f http://localhost/ || exit 1" ]
          },
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": "/aws/fargate/fargate-app-awslogs",
              "awslogs-region": {"Ref": "AWS::Region"},
              "awslogs-stream-prefix": "e2-fargate"
            }
          },
          "PortMappings": [{
            "ContainerPort": 443,
            "HostPort": 443
          }]
        }]
      }
    },
    "E2CronFargateTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Cpu": 512,
        "Memory": 1024,
        "Family": "e2cron-family",
        "ExecutionRoleArn": {"Ref": "E2TaskExecutionRole"},
        "RequiresCompatibilities": ["FARGATE"],
        "NetworkMode": "awsvpc",
        "RuntimePlatform": {
          "CpuArchitecture": "X86_64",
          "OperatingSystemFamily": "LINUX"
        },
        "TaskRoleArn": {"Ref": "AppFargateTaskRole"},
        "ContainerDefinitions": [{
          "Name": "e2app",
          "Image": {"Fn::Join": [":",[{"Fn::GetAtt": ["E2AppECRRegistry","RepositoryUri"]},"latest"]]},
          "Memory": 1024,
          "Essential": true,
          "LogConfiguration": {
            "LogDriver": "awslogs",
            "Options": {
              "awslogs-group": "/aws/fargate/fargate-cron-awslogs",
              "awslogs-region": {"Ref": "AWS::Region"},
              "awslogs-stream-prefix": "e2-fargate"
            }
          }
        }]
      }
    },
    "FargateServiceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/fargate/fargate-app-awslogs",
        "RetentionInDays": 3
      }
    },
    "FargateCronLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/fargate/fargate-cron-awslogs",
        "RetentionInDays": 3
      }
    },
    "ECSFargateAppService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {"Ref": "ECSAppCluster"},
        "EnableECSManagedTags": true,
        "ServiceName": "E2-App-Fargate-Service",
        "DeploymentController": {
          "Type": "ECS"
        },
        "DeploymentConfiguration": {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 100
        },
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
            "Subnets": [{"Ref": "AppVPCSubnet1"}]
          }
        },
        "DesiredCount": 1,
        "TaskDefinition": {"Ref": "E2AppFargateTaskDefinition"},
        "CapacityProviderStrategy": [{
          "CapacityProvider": "FARGATE",
          "Base": 1,
          "Weight": 1
        },{
          "CapacityProvider": "FARGATE_SPOT",
          "Weight": 4
        }],
        "LoadBalancers": [{
          "ContainerName": "e2app",
          "ContainerPort": 443,
          "TargetGroupArn": {"Ref": "FargateTargetGroup"} 
        }]
      }
    },
    "ContainerizedFrontendELB": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "E2-Containerized-Frontend-ELB",
        "Subnets": [{"Ref": "AppVPCSubnet1"},{"Ref": "AppVPCSubnet2"}],
        "SecurityGroups": [{"Ref": "ELBFrontendSecurityGroup"}],
        "LoadBalancerAttributes": [
          {
            "Key": "access_logs.s3.enabled",
            "Value": true
          },
          {
            "Key": "access_logs.s3.bucket",
            "Value": {"Ref": "ELBLogsBucket"}
          }
        ]
      }
    },
    "FargateTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "Name": "E2-App-Fargate-HTTPS-TG",
        "VpcId": {"Ref": "AppVPC"},
        "Protocol": "HTTPS",
        "Port": "443",
        "HealthCheckEnabled": true,
        "HealthCheckPort": "443",
        "HealthCheckProtocol": "HTTPS",
        "Matcher": {
          "HttpCode": "200"
        },
        "TargetType": "ip",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "10"
          }
        ]
      }
    },
    "ELBContainerizedAppHTTPSListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {"Ref": "FargateTargetGroup"},
            "Type": "forward"
          }
        ],
        "Certificates": [{"CertificateArn": {"Ref": "E2ELBCertificate"}}],
        "LoadBalancerArn": {"Ref": "ContainerizedFrontendELB"},
        "Port": "443",
        "Protocol": "HTTPS",
        "SslPolicy": "ELBSecurityPolicy-TLS-1-2-Ext-2018-06"
      }
    },
    "ELBContainerizedAppHTTPListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "redirect",
            "RedirectConfig": {
              "Protocol": "HTTPS",
              "Port": "443",
              "Host": "#{host}",
              "Path": "/#{path}",
              "Query": "#{query}",
              "StatusCode": "HTTP_301"
            }
          }
        ],
        "LoadBalancerArn": {"Ref": "ContainerizedFrontendELB"},
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "AppFargateTaskRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "ecs-tasks.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Role for Fargate App workloads",
        "ManagedPolicyArns": [
            {"Ref": "E2AppRDSAddOnly"},
            {"Ref": "E2AppS3Policy"},
            {"Ref": "E2AppMailerPolicy"},
            {"Ref": "E2AppSecretsAccessPolicy"},
            {"Ref": "E2AppServerSNSPolicy"},
            {"Ref": "CloudWatchEventsWritePolicy"},
            {"Ref": "SitemapBucketWritePolicy"}
        ],
        "Path": "/",
        "RoleName": "E2-App-Fargate-Task-Role"
      }
    },
    "E2TaskExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "ecs-tasks.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Description": "Role for E2 Task Execution Role inside of the container",
        "ManagedPolicyArns": [
            "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ],
        "Path": "/",
        "RoleName": "E2-Task-Execution-Role"
      }
    },
    "AppAutoScalingRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "e2-fargate-auto-scaling-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "application-autoscaling.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [{
          "PolicyName": "service-auto-scaling-policy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": {
              "Effect": "Allow",
              "Action": ["ecs:DescribeServices","ecs:UpdateServices","cloudwatch:PutMetricAlarm","cloudwatch:DescribeAlarms","cloudwatch:DeleteAlarms"],
              "Resource": "*"
            }
          }
        }]
      }
    },
    "FargateAppScalableTarget": {
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
      "Properties": {
        "RoleARN": {"Fn::GetAtt": ["AppAutoScalingRole","Arn"]},
        "ResourceId": {"Fn::Join": ["/",["service",{"Ref": "ECSAppCluster"},{"Fn::GetAtt": ["ECSFargateAppService","Name"]}]]},
        "ServiceNamespace": "ecs",
        "ScalableDimension": "ecs:service:DesiredCount",
        "MinCapacity": 1,
        "MaxCapacity": 10
      }
    },
    "FargateAppAutoScalingPolicy": {
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
      "Properties": {
        "PolicyName": "FargateAppCPUAutoScalingPolicy",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": {"Ref": "FargateAppScalableTarget"},
        "TargetTrackingScalingPolicyConfiguration": {
          "DisableScaleIn": true,
          "TargetValue": 60,
          "ScaleInCooldown": 60,
          "ScaleOutCooldown": 60,
          "PredefinedMetricSpecification": {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization"
          }
        }
      }
    },
    "ECSEventsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "e2-ecs-events-role",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": {
            "Effect": "Allow",
            "Principal": {"Service": "events.amazonaws.com"},
            "Action": "sts:AssumeRole"
          }
        },
        "Policies": [{
          "PolicyName": "e2-ecs-pass-any-role",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": {
              "Effect": "Allow",
              "Action": ["iam:PassRole"],
              "Resource": "*"
            }
          }
        },
        {
          "PolicyName": "e2-ecs-run-any-task",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": {
              "Effect": "Allow",
              "Action": ["ecs:RunTask"],
              "Resource": "*"
            }
          }
        }]
      }
    },
    "CronChatterboxCleanupRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Cron rule to call chatterbox-cleanup",
        "Name": "cron-chatterbox-cleanup",
        "State": "ENABLED",
        "ScheduleExpression": "cron(50 * * * ? *)",
        "Targets": [{
          "Id": "chatterbox-cleanup-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_clean_cbox.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronGenerateSitemapRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Cron rule to call generate-sitemap",
        "Name": "cron-generate-sitemap",
        "State": "ENABLED",
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "Targets": [{
          "Id": "cron-sitemap-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_generate_sitemap.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronDatastashRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Cron rule to call datastash",
        "Name": "cron-datastash",
        "State": "ENABLED",
        "ScheduleExpression": "rate(2 minutes)",
        "Targets": [{
          "Id": "datastash-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_datastash.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronDatastashLengthyRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Cron rule to call datastash lengthy",
        "Name": "cron-datastash-lengthy",
        "State": "ENABLED",
        "ScheduleExpression": "rate(6 hours)",
        "Targets": [{
          "Id": "datastash-lengthy-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_datastash.pl\",\"--lengthy\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronIQMRecalcRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Cron rule to call IQM Recalculate",
        "Name": "cron-iqm-recalc",
        "State": "ENABLED",
        "ScheduleExpression": "rate(1 day)",
        "Targets": [{
          "Id": "iqm-recalc-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_iqm_recalculate.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronRefreshRoomsRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Cron rule to call refresh rooms",
        "Name": "cron-refresh-rooms",
        "State": "ENABLED",
        "ScheduleExpression": "rate(5 minutes)",
        "Targets": [{
          "Id": "refresh-rooms-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_refresh_rooms.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    },
    "CronCleanOldRoomsRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Cron rule to call clean old rooms",
        "Name": "cron-clean-old-rooms",
        "State": "ENABLED",
        "ScheduleExpression": "rate(1 day)",
        "Targets": [{
          "Id": "clean-old-rooms-task-arn",
          "Input": "{\"containerOverrides\": [{\"name\": \"e2app\", \"command\": [\"/usr/bin/perl\",\"/var/everything/cron/cron_clean_old_rooms.pl\"]}]}",
          "Arn": {"Fn::Sub": "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ECSAppCluster}"},
          "RoleArn": {"Fn::GetAtt": ["ECSEventsRole","Arn"]},
          "EcsParameters": {
            "TaskCount": 1,
            "TaskDefinitionArn": {"Ref": "E2CronFargateTaskDefinition"},
            "NetworkConfiguration": {
              "AwsVpcConfiguration": {
                "AssignPublicIp": "ENABLED",
                "SecurityGroups": [{"Ref": "E2AppWebheadSecurityGroup"}],
                "Subnets": [{"Ref": "AppVPCSubnet1"}]
              }
            },
            "CapacityProviderStrategy": [
              {
                "Base": 1,
                "CapacityProvider": "FARGATE_SPOT",
                "Weight": 4
              },
              {
                "CapacityProvider": "FARGATE",
                "Weight": 1
              }
            ]
          }
        }]
      }
    }

  }
}
