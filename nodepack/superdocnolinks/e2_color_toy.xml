<node>
  <doctext>&lt;noscript&gt;
&lt;h3&gt;JavaScript is not available in your browser.&lt;/h3&gt;
&lt;p&gt;It may be disabled, or your browser may not support it at all. 
&lt;strong&gt;Without JavaScript, this page will not work.&lt;/strong&gt; We apologize. &lt;/p&gt;
&lt;hr&gt;
&lt;/noscript&gt;

&lt;style type=&quot;text/css&quot;&gt;
&lt;!--
.gradcell {
    position: relative;
    visibility: show;
    margin: 0px;
    padding: 0px;
}
//--&gt;
&lt;/style&gt;
&lt;script language=&quot;JavaScript&quot;&gt;
// 2069767.js colorclass.js
// Unknown usage

//  JavaScript class for handling colors
//  1/24/02

//-----------------------------------------------------------------------------
//  Named colors
var NAMED = new Object();
//  Which of the named colors are fake.
var FAKE  = new Object();
initNamedColors();

//-----------------------------------------------------------------------------
//  These are IntRange instances. They are properly initalized below, after the 
//  IntRange class is fully defined.
var RGBRange    = null; //  RGB values
var HueRange    = null; //  Hue
var SatBriRange = null; //  Saturation and brightness

//-----------------------------------------------------------------------------
function zpadl( s, digits ) {
    while ( s.length &lt; digits )
        s = &quot;0&quot; + s;
    return s;
}


function toHex( x, digits ) {
    var n = parseInt( x.toString() );

    if ( digits == null )
        digits = 1;

    if ( isNaN( n ) )
        n = 0;

    return zpadl(n.toString( 16 ), 2 );
}


//-----------------------------------------------------------------------------
function IntRange( low, high, dflt ) {
    this.set( low, high, dflt );
}

IntRange.prototype.low      = 0;
IntRange.prototype.high     = 255;
IntRange.prototype.dflt     = 0;

IntRange.prototype.set = function( low, high, dflt ) {
    if ( low != null ) {
        this.low = parseInt( low );
        if ( isNaN( this.low ) )
            this.low = IntRange.prototype.low;
    }

    if ( high != null ) {
        this.high = parseInt( high );
        if ( isNaN( this.high ) )
            this.high = IntRange.prototype.high;
    }

    if ( dflt != null ) {
        this.dflt = parseInt( dflt );
        if ( isNaN( this.dflt ) )
            this.dflt = IntRange.prototype.dflt;
    }

    return this;
}

//  If n is a string that might not be base 10, provide a radix
IntRange.prototype.enforceOn = function( n, radix ) {
    n = parseInt( n, radix );

    if ( isNaN( n ) )
        return this.dflt;
    else if ( n &lt; this.low )
        return this.low;
    else if ( n &gt; this.high )
        return this.high;
    else
        return n;
}


//-----------------------------------------------------------------------------
//  Due to the weird JS object model, IntRange() exists before we define it. 
//  This is because it is declared, so it exists as soon as the file is parsed. 
//  Its member functions, however, aren not added until *execution* of the file 
//  gets to that point: They are assignments rather than declarations. If we do 
//  this before then, we get errors because the constructor calls 
//  IntRange.prototype.set, which remains undefined until we assign a function 
//  object to it. 
RGBRange    = new IntRange( 0, 255, 0 );    //  RGB values
HueRange    = new IntRange( 0, 419, 0 );    //  Hue
SatBriRange = new IntRange( 0, 100, 0 );    //  Saturation and brightness


//-----------------------------------------------------------------------------
function htmlColor( r, g, b ) {
    return &quot;#&quot; + toHex(r, 2 ) + toHex(g, 2 ) + toHex(b, 2 );
}

function namedColorValue( s ) {
    var s = NAMED[ s ];

    return ( ( &quot;&quot; + s ) == &quot;undefined&quot; ) ? &quot;#000000&quot; : s;
}


//-----------------------------------------------------------------------------
//  This one is the whole point.
//  Constructor:
//      Color( a, b, c )    //  If all arguments are null, default to 0, 0, 0;
//                          //  If b or c is null but a is not, call 
//                          //  this.fromString( a );
//                          //  Otherwise, call this.fromRGB( a, b, c ).
//
//  Members:
//      r, g, b             //  Red, green, and blue values.
//
//      fromString( s )     //  If the first character of s is &quot;#&quot;, s is 
//                          //  presumed to be an HTML hex color string. 
//                          //  Otherwise, it is presumed to be a named HTML 
//                          //  color.
//
//      toString()          //  return HTML hex color string: #RRGGBB
//      fromRGB( r, g, b )  //  Initialize from red, green, and blue values
//      fromHSB( h, s, b )  //  Initialize from hue, saturation, and brightness
//      toHSB()             //  return HSB object w/ h, s, and b members
//
//      getRGBSorted()      //  return an Object with min, max, and mid members.
//                          //  We use it internally.
//-----------------------------------------------------------------------------
function Color( a, b, c ) {
    if ( a != null ) {
        if ( b == null &amp;&amp; c == null ) {
            this.fromString( a );
        } else {
            this.fromRGB( a, b, c );
        }
    }
}

Color.prototype.r   = 0;
Color.prototype.g   = 0;
Color.prototype.b   = 0;

Color.prototype.fromRGB = function( r, g, b ) {
    this.r = RGBRange.enforceOn( r );
    this.g = RGBRange.enforceOn( g );
    this.b = RGBRange.enforceOn( b );

    return this;
}

Color.prototype.toString = function() {
    return htmlColor( this.r, this.g, this.b );
}

Color.prototype.fromString = function( s ) {
    s = (s + &quot;&quot;).toString();

    if ( s.substr( 0, 1 ) != &quot;#&quot; )
        s = namedColorValue( s );

    s = zpadl( s.replace( /^[^0-9a-f]/gi, &quot;&quot; ), 6 );

    var clrs = s.match( /([0-9a-f][0-9a-f])/gi );

    this.r = RGBRange.enforceOn( clrs[ 0 ], 16 );
    this.g = RGBRange.enforceOn( clrs[ 1 ], 16 );
    this.b = RGBRange.enforceOn( clrs[ 2 ], 16 );

    return this;
}

Color.prototype.fromHSB = function( hue, sat, bright ) {
    sat /= 100;
    bright /= 100;

    if ( sat == 0 ) {
        this.r = bright;
        this.g = bright;
        this.b = bright;

        return this;
    } else {
        hue = hue / 60;
        var i = Math.floor( hue );
        var f = hue - i;
        var p = bright * ( 1.0 - sat );
        var q = bright * ( 1.0 - sat * f );
        var t = bright * ( 1.0 - sat * ( 1.0 - f ) );

        bright *= 255;
        t *= 255;
        p *= 255;
        q *= 255;

        switch ( i ) {
            case 0:
                return this.fromRGB( bright, t, p );

            case 1:
                return this.fromRGB( q, bright, p );

            case 2:
                return this.fromRGB( p, bright, t );

            case 3:
                return this.fromRGB( p, q, bright );

            case 4:
                return this.fromRGB( t, p, bright );

            default:
                return this.fromRGB( bright, p, q );
        }
    }
}


Color.prototype.getRGBSorted = function() {
    var ary = new Array( this.r, this.b, this.g );

    //  Make sure we sort these as integers, not strings.
    //  According to Netscape JS documentation, the callback will not work with 
    //  some pre-v4 versions of Netscape on some platforms. Or something. Maybe 
    //  it was version 2. 
    ary.sort( function( a, b ) { return parseInt( a ) - parseInt( b ); } );

    /*
    var rtn = new Object();

    rtn.min = ary[ 0 ];
    rtn.mid = ary[ 1 ];
    rtn.max = ary[ 2 ];

    alert( rtn.toSource() );

    return rtn;
    */

    //  Object literal. Ph334r my 1337 skillz.
    return { min: ary[ 0 ], mid: ary[ 1 ], max: ary[ 2 ] };
}


Color.prototype.toHSB = function() {
    var domainBase      = 0;
    var domainOffset    = 0;

    var hsb = new HSB();
    var mmm = this.getRGBSorted();

    if ( mmm.max == 0 ) {
        hsb.b = 0;
        hsb.s = 0;
    } else {
        hsb.b = mmm.max / 255;
        hsb.s = ( hsb.b - ( mmm.min / 255.0 ) ) / hsb.b;
    }

    var oneSixth = 1.0 / 6.0;

    domainOffset = ( mmm.mid - mmm.min ) / ( mmm.max - mmm.min ) / 6.0;

    if ( mmm.max == mmm.min ) {
        hsb.h = 0;
    } else {
        if ( this.r == mmm.max ) {
            if ( mmm.mid == this.g ) {
                domainBase = 0 / 6.0;
            } else {
                domainBase = 5 / 6.0;
                domainOffset = oneSixth - domainOffset;
            }
        } else if ( this.g == mmm.max ) {
            if ( mmm.mid == this.b ) {
                domainBase = 2 / 6.0;
            } else {
                domainBase = 1 / 6.0;
                domainOffset = oneSixth - domainOffset;
            }
        } else {
            if ( mmm.mid == this.r ) {
                domainBase = 4 / 6.0;
            } else {
                domainBase = 3 / 6.0;
                domainOffset = oneSixth - domainOffset;
            }
        }

        hsb.h = domainBase + domainOffset;
    }

    hsb.h = Math.round( hsb.h * 360 );
    hsb.s = Math.round( hsb.s * 100 );
    hsb.b = Math.round( hsb.b * 100 );

    return hsb.integerize();
}


//-----------------------------------------------------------------------------
//  This HSB class is primitive. Think of it as a struct with functions rather
//  than a real class. It exists only so Color.toHSB() has a type to return.
//-----------------------------------------------------------------------------
function HSB( h, s, b ) {
    this.h = h || 0;
    this.s = s || 0;
    this.b = b || 0;
}

HSB.prototype.integerize = function() {
    this.h = parseInt( this.h );
    this.s = parseInt( this.s );
    this.b = parseInt( this.b );

    return this;
}

HSB.prototype.toString = function() {
    return this.toColor().toString();
}


HSB.prototype.toColor = function() {
    return new Color().fromHSB( this.h, this.s, this.b );
}


//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
function initNamedColors() {
    NAMED[ &quot;snow&quot; ]                 = &quot;#fffafa&quot;;
    NAMED[ &quot;ghostwhite&quot; ]           = &quot;#f8f8ff&quot;;
    NAMED[ &quot;whitesmoke&quot; ]           = &quot;#f5f5f5&quot;;
    NAMED[ &quot;gainsboro&quot; ]            = &quot;#dcdcdc&quot;;
    NAMED[ &quot;floralwhite&quot; ]          = &quot;#fffaf0&quot;;
    NAMED[ &quot;oldlace&quot; ]              = &quot;#fdf5e6&quot;;
    NAMED[ &quot;linen&quot; ]                = &quot;#faf0e6&quot;;
    NAMED[ &quot;antiquewhite&quot; ]         = &quot;#faebd7&quot;;
    NAMED[ &quot;papayawhip&quot; ]           = &quot;#ffefd5&quot;;
    NAMED[ &quot;blanchedalmond&quot; ]       = &quot;#ffebcd&quot;;
    NAMED[ &quot;bisque&quot; ]               = &quot;#ffe4c4&quot;;
    NAMED[ &quot;peachpuff&quot; ]            = &quot;#ffdab9&quot;;
    NAMED[ &quot;navajowhite&quot; ]          = &quot;#ffdead&quot;;
    NAMED[ &quot;moccasin&quot; ]             = &quot;#ffe4b5&quot;;
    NAMED[ &quot;cornsilk&quot; ]             = &quot;#fff8dc&quot;;
    NAMED[ &quot;ivory&quot; ]                = &quot;#fffff0&quot;;
    NAMED[ &quot;lemonchiffon&quot; ]         = &quot;#fffacd&quot;;
    NAMED[ &quot;seashell&quot; ]             = &quot;#fff5ee&quot;;
    NAMED[ &quot;honeydew&quot; ]             = &quot;#f0fff0&quot;;
    NAMED[ &quot;mintcream&quot; ]            = &quot;#f5fffa&quot;;
    NAMED[ &quot;azure&quot; ]                = &quot;#f0ffff&quot;;
    NAMED[ &quot;aliceblue&quot; ]            = &quot;#f0f8ff&quot;;
    NAMED[ &quot;lavender&quot; ]             = &quot;#e6e6fa&quot;;
    NAMED[ &quot;lavenderblush&quot; ]        = &quot;#fff0f5&quot;;
    NAMED[ &quot;mistyrose&quot; ]            = &quot;#ffe4e1&quot;;
    NAMED[ &quot;white&quot; ]                = &quot;#ffffff&quot;;
    NAMED[ &quot;black&quot; ]                = &quot;#000000&quot;;
    NAMED[ &quot;darkslategray&quot; ]        = &quot;#2f4f4f&quot;;
    NAMED[ &quot;dimgray&quot; ]              = &quot;#696969&quot;;
    NAMED[ &quot;slategray&quot; ]            = &quot;#708090&quot;;
    NAMED[ &quot;lightslategray&quot; ]       = &quot;#778899&quot;;
    NAMED[ &quot;gray&quot; ]                 = &quot;#bebebe&quot;;
    NAMED[ &quot;lightgray&quot; ]            = &quot;#d3d3d3&quot;;
    NAMED[ &quot;midnightblue&quot; ]         = &quot;#191970&quot;;
    NAMED[ &quot;cornflowerblue&quot; ]       = &quot;#6495ed&quot;;
    NAMED[ &quot;darkslateblue&quot; ]        = &quot;#483d8b&quot;;
    NAMED[ &quot;slateblue&quot; ]            = &quot;#6a5acd&quot;;
    NAMED[ &quot;mediumslateblue&quot; ]      = &quot;#7b68ee&quot;;
    NAMED[ &quot;mediumblue&quot; ]           = &quot;#0000cd&quot;;
    NAMED[ &quot;royalblue&quot; ]            = &quot;#4169e1&quot;;
    NAMED[ &quot;blue&quot; ]                 = &quot;#0000ff&quot;;
    NAMED[ &quot;dodgerblue&quot; ]           = &quot;#1e90ff&quot;;
    NAMED[ &quot;deepskyblue&quot; ]          = &quot;#00bfff&quot;;
    NAMED[ &quot;skyblue&quot; ]              = &quot;#87ceeb&quot;;
    NAMED[ &quot;lightskyblue&quot; ]         = &quot;#87cefa&quot;;
    NAMED[ &quot;steelblue&quot; ]            = &quot;#4682b4&quot;;
    NAMED[ &quot;lightsteelblue&quot; ]       = &quot;#b0c4de&quot;;
    NAMED[ &quot;lightblue&quot; ]            = &quot;#add8e6&quot;;
    NAMED[ &quot;powderblue&quot; ]           = &quot;#b0e0e6&quot;;
    NAMED[ &quot;paleturquoise&quot; ]        = &quot;#afeeee&quot;;
    NAMED[ &quot;darkturquoise&quot; ]        = &quot;#00ced1&quot;;
    NAMED[ &quot;mediumturquoise&quot; ]      = &quot;#48d1cc&quot;;
    NAMED[ &quot;turquoise&quot; ]            = &quot;#40e0d0&quot;;
    NAMED[ &quot;cyan&quot; ]                 = &quot;#00ffff&quot;;
    NAMED[ &quot;lightcyan&quot; ]            = &quot;#e0ffff&quot;;
    NAMED[ &quot;cadetblue&quot; ]            = &quot;#5f9ea0&quot;;
    NAMED[ &quot;mediumaquamarine&quot; ]     = &quot;#66cdaa&quot;;
    NAMED[ &quot;aquamarine&quot; ]           = &quot;#7fffd4&quot;;
    NAMED[ &quot;darkgreen&quot; ]            = &quot;#006400&quot;;
    NAMED[ &quot;darkolivegreen&quot; ]       = &quot;#556b2f&quot;;
    NAMED[ &quot;darkseagreen&quot; ]         = &quot;#8fbc8f&quot;;
    NAMED[ &quot;seagreen&quot; ]             = &quot;#2e8b57&quot;;
    NAMED[ &quot;mediumseagreen&quot; ]       = &quot;#3cb371&quot;;
    NAMED[ &quot;lightseagreen&quot; ]        = &quot;#20b2aa&quot;;
    NAMED[ &quot;palegreen&quot; ]            = &quot;#98fb98&quot;;
    NAMED[ &quot;springgreen&quot; ]          = &quot;#00ff7f&quot;;
    NAMED[ &quot;lawngreen&quot; ]            = &quot;#7cfc00&quot;;
    NAMED[ &quot;chartreuse&quot; ]           = &quot;#7fff00&quot;;
    NAMED[ &quot;greenyellow&quot; ]          = &quot;#adff2f&quot;;
    NAMED[ &quot;limegreen&quot; ]            = &quot;#32cd32&quot;;
    NAMED[ &quot;forestgreen&quot; ]          = &quot;#228b22&quot;;
    NAMED[ &quot;green&quot; ]                = &quot;#00ff00&quot;;
    NAMED[ &quot;olivedrab&quot; ]            = &quot;#6b8e23&quot;;
    NAMED[ &quot;yellowgreen&quot; ]          = &quot;#9acd32&quot;;
    NAMED[ &quot;darkkhaki&quot; ]            = &quot;#bdb76b&quot;;
    NAMED[ &quot;palegoldenrod&quot; ]        = &quot;#eee8aa&quot;;
    NAMED[ &quot;lightgoldenrodyellow&quot; ] = &quot;#fafad2&quot;;
    NAMED[ &quot;lightyellow&quot; ]          = &quot;#ffffe0&quot;;
    NAMED[ &quot;yellow&quot; ]               = &quot;#ffff00&quot;;
    NAMED[ &quot;gold&quot; ]                 = &quot;#ffd700&quot;;
    NAMED[ &quot;goldenrod&quot; ]            = &quot;#daa520&quot;;
    NAMED[ &quot;darkgoldenrod&quot; ]        = &quot;#b8860b&quot;;
    NAMED[ &quot;rosybrown&quot; ]            = &quot;#bc8f8f&quot;;
    NAMED[ &quot;indianred&quot; ]            = &quot;#cd5c5c&quot;;
    NAMED[ &quot;saddlebrown&quot; ]          = &quot;#8b4513&quot;;
    NAMED[ &quot;sienna&quot; ]               = &quot;#a0522d&quot;;
    NAMED[ &quot;peru&quot; ]                 = &quot;#cd853f&quot;;
    NAMED[ &quot;burlywood&quot; ]            = &quot;#deb887&quot;;
    NAMED[ &quot;beige&quot; ]                = &quot;#f5f5dc&quot;;
    NAMED[ &quot;wheat&quot; ]                = &quot;#f5deb3&quot;;
    NAMED[ &quot;sandybrown&quot; ]           = &quot;#f4a460&quot;;
    NAMED[ &quot;tan&quot; ]                  = &quot;#d2b48c&quot;;
    NAMED[ &quot;chocolate&quot; ]            = &quot;#d2691e&quot;;
    NAMED[ &quot;firebrick&quot; ]            = &quot;#b22222&quot;;
    NAMED[ &quot;brown&quot; ]                = &quot;#a52a2a&quot;;
    NAMED[ &quot;darksalmon&quot; ]           = &quot;#e9967a&quot;;
    NAMED[ &quot;salmon&quot; ]               = &quot;#fa8072&quot;;
    NAMED[ &quot;lightsalmon&quot; ]          = &quot;#ffa07a&quot;;
    NAMED[ &quot;orange&quot; ]               = &quot;#ffa500&quot;;
    NAMED[ &quot;darkorange&quot; ]           = &quot;#ff8c00&quot;;
    NAMED[ &quot;coral&quot; ]                = &quot;#ff7f50&quot;;
    NAMED[ &quot;lightcoral&quot; ]           = &quot;#f08080&quot;;
    NAMED[ &quot;tomato&quot; ]               = &quot;#ff6347&quot;;
    NAMED[ &quot;orangered&quot; ]            = &quot;#ff4500&quot;;
    NAMED[ &quot;red&quot; ]                  = &quot;#ff0000&quot;;
    NAMED[ &quot;hotpink&quot; ]              = &quot;#ff69b4&quot;;
    NAMED[ &quot;deeppink&quot; ]             = &quot;#ff1493&quot;;
    NAMED[ &quot;pink&quot; ]                 = &quot;#ffc0cb&quot;;
    NAMED[ &quot;lightpink&quot; ]            = &quot;#ffb6c1&quot;;
    NAMED[ &quot;palevioletred&quot; ]        = &quot;#db7093&quot;;
    NAMED[ &quot;maroon&quot; ]               = &quot;#b03060&quot;;
    NAMED[ &quot;mediumvioletred&quot; ]      = &quot;#c71585&quot;;
    NAMED[ &quot;magenta&quot; ]              = &quot;#ff00ff&quot;;
    NAMED[ &quot;violet&quot; ]               = &quot;#ee82ee&quot;;
    NAMED[ &quot;plum&quot; ]                 = &quot;#dda0dd&quot;;
    NAMED[ &quot;orchid&quot; ]               = &quot;#da70d6&quot;;
    NAMED[ &quot;mediumorchid&quot; ]         = &quot;#ba55d3&quot;;
    NAMED[ &quot;darkorchid&quot; ]           = &quot;#9932cc&quot;;
    NAMED[ &quot;darkviolet&quot; ]           = &quot;#9400d3&quot;;
    NAMED[ &quot;blueviolet&quot; ]           = &quot;#8a2be2&quot;;
    NAMED[ &quot;purple&quot; ]               = &quot;#a020f0&quot;;
    NAMED[ &quot;mediumpurple&quot; ]         = &quot;#9370db&quot;;
    NAMED[ &quot;thistle&quot; ]              = &quot;#d8bfd8&quot;;
    //  fake
    NAMED[ &quot;wharfkhaki&quot; ]           = &quot;#d5d1c1&quot;;
    NAMED[ &quot;wharfolive&quot; ]           = &quot;#6e6d56&quot;;
    NAMED[ &quot;jukkaback&quot; ]            = &quot;#ddddbb&quot;;
    NAMED[ &quot;jukkaodd&quot; ]             = &quot;#cccc99&quot;;
    NAMED[ &quot;jukkabrown&quot; ]           = &quot;#7e7e66&quot;;

    FAKE[ &quot;wharfkhaki&quot; ]        = true;
    FAKE[ &quot;wharfolive&quot; ]        = true;
    FAKE[ &quot;jukkaback&quot; ]         = true;
    FAKE[ &quot;jukkaodd&quot; ]          = true;
    FAKE[ &quot;jukkabrown&quot; ]        = true;
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------

&lt;!--
//  Named HTML colors
var IS_NS4      = (     navigator.appName == &quot;Netscape&quot;
                    &amp;&amp;  navigator.userAgent.indexOf( 'Mozilla/5' ) == -1 );
var obj_ref     = ( IS_NS4 ) ? ns_obj_ref : ie_obj_ref;
//  This should, obviously, be a member function. However, IE 5.5 seems to have
//  some kind of issue with that.
var setBGColor  = ( IS_NS4 ) ? ns_setBGColor : ie_setBGColor;

//------------------------------------------------------------------------------
function ie_obj_ref( parent, name ) {
    //  This works w/ Opera 5+ (dunno 'bout 4), Mozilla, and IE 5+ (dunno 'bout
    //  IE4; parent[ name ] is known to work with IE 4, but not with Mozilla)
    return parent.getElementById( name );
}

function ns_obj_ref( parent, name ) {
    return parent[ name ];
}

function ie_setBGColor( obj, clr ) {
    obj.style.backgroundColor = clr;
}

function ns_setBGColor( obj, clr ) {
    obj.bgColor = clr;
}

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

function on_use_HSB( frm ) {
    frm.hue.value       = HueRange.enforceOn( frm.hue.value );
    frm.sat.value       = SatBriRange.enforceOn( frm.sat.value );
    frm.bright.value    = SatBriRange.enforceOn( frm.bright.value );

    var clr = new Color().fromHSB( frm.hue.value, frm.sat.value, frm.bright.value );

    frm.r.value = clr.r;
    frm.g.value = clr.g;
    frm.b.value = clr.b;

    frm.hex.value = clr.toString();

    var cell = obj_ref( document, 'dechex' );
    setBGColor( cell, clr.toString() );
}

function on_use_RGB( frm ) {
    frm.r.value = RGBRange.enforceOn( frm.r.value );
    frm.g.value = RGBRange.enforceOn( frm.g.value );
    frm.b.value = RGBRange.enforceOn( frm.b.value );

    var clr = new Color( frm.r.value, frm.g.value, frm.b.value );
    frm.hex.value = clr;

    var hsb = clr.toHSB();
    frm.hue.value       = hsb.h;
    frm.sat.value       = hsb.s;
    frm.bright.value    = hsb.b;

    var cell = obj_ref( document, 'dechex' );
    setBGColor( cell, clr.toString() );
}

function on_use_hex( frm ) {
    var clr = new Color( frm.hex.value );

    if ( frm.nametohex.checked )
        frm.hex.value = clr;

    frm.r.value = clr.r;
    frm.g.value = clr.g;
    frm.b.value = clr.b;

    var hsb = clr.toHSB();
    frm.hue.value       = hsb.h;
    frm.sat.value       = hsb.s;
    frm.bright.value    = hsb.b;

    var cell = obj_ref( document, 'dechex' );
    setBGColor( cell, clr.toString() );
}

function use_in_grad( value, which ) {
    document.forms.grad[ which ].value = value;
    on_gengrad( document.forms.grad );
}

function on_gengrad( frm ) {
    var from    = new Color( frm.from.value );
    var to      = new Color( frm.to.value );
    var cell    = null;
    var inc     = new Object(); //  Signed increments for each color

    if ( frm.nametohex.checked ) {
        frm.from.value  = from;
        frm.to.value    = to;
    }

    inc.r   = ( to.r - from.r ) / 15;
    inc.g   = ( to.g - from.g ) / 15;
    inc.b   = ( to.b - from.b ) / 15;

    var clr = new Color( from );

    var hexes = '';

    for ( i = 0; i &lt; 15; ++i ) {
        cell = obj_ref( document, 'grad' + i );
        setBGColor( cell, clr.toString() );
        hexes += clr.toString() + '\n';
        clr.r += inc.r;
        clr.g += inc.g;
        clr.b += inc.b;
    }

    cell = obj_ref( document, 'grad' + i );
    setBGColor( cell, to.toString() );
    hexes += to.toString() + '\n';

    frm.output.value = hexes;

    frm.output.select();
    frm.output.focus();
}
//--&gt;
&lt;/script&gt;

&lt;form name=&quot;color&quot;&gt;
&lt;table border=&quot;0&quot;&gt;

&lt;tr valign=&quot;top&quot;&gt;
&lt;td&gt;
&lt;input type=&quot;button&quot; value=&quot;Use&quot; onclick=&quot;on_use_HSB( document.forms.color )&quot; /&gt;
&lt;small&gt;Hue:&lt;/small&gt; &lt;input type=&quot;text&quot; size=&quot;4&quot; name=&quot;hue&quot; value=&quot;0&quot; /&gt;
&lt;small&gt;Saturation:&lt;/small&gt; &lt;input type=&quot;text&quot; size=&quot;4&quot; name=&quot;sat&quot; value=&quot;0&quot; /&gt;
&lt;small&gt;Brightness:&lt;/small&gt; &lt;input type=&quot;text&quot; size=&quot;4&quot; name=&quot;bright&quot; value=&quot;0&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;small&gt;&lt;i&gt;Hue must be 0..419; S/B values must be 0..100.&lt;/i&gt;&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr valign=&quot;top&quot;&gt;
&lt;td&gt;
&lt;input type=&quot;button&quot; value=&quot;Use&quot; onclick=&quot;on_use_RGB( document.forms.color )&quot; /&gt;
&lt;small&gt;Red:&lt;/small&gt; &lt;input type=&quot;text&quot; size=&quot;4&quot; name=&quot;r&quot; value=&quot;0&quot; /&gt;
&lt;small&gt;Green:&lt;/small&gt; &lt;input type=&quot;text&quot; size=&quot;4&quot; name=&quot;g&quot; value=&quot;0&quot; /&gt;
&lt;small&gt;Blue:&lt;/small&gt; &lt;input type=&quot;text&quot; size=&quot;4&quot; name=&quot;b&quot; value=&quot;0&quot; /&gt;
&lt;/td&gt;
&lt;td&gt;&lt;small&gt;&lt;i&gt;R/G/B values must be 0..255.&lt;/i&gt;&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr valign=&quot;top&quot;&gt;
&lt;td&gt;
&lt;input type=&quot;button&quot; value=&quot;Use&quot; onclick=&quot;on_use_hex( document.forms.color )&quot; /&gt;
Hex/&lt;a href=&quot;/index.pl?node=Named%20HTML%20Colors&quot;&gt;named&lt;/a&gt;: 
&lt;input type=&quot;text&quot; size=&quot;12&quot; name=&quot;hex&quot; value=&quot;#000000&quot; /&gt;
&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; name=&quot;nametohex&quot; __checked&gt;Convert named colors to hex&lt;/input&gt;
&lt;/td&gt;
&lt;td&gt;&lt;small&gt;&lt;i&gt;Hex fields will also accept &lt;a href=&quot;/index.pl?node=Named%20HTML%20Colors&quot;&gt;HTML color 
names&lt;/a&gt; like &lt;/i&gt;&lt;tt&gt;dodgerblue&lt;/tt&gt;&lt;i&gt; etc.&lt;/i&gt;&lt;/small&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;/table&gt;

&lt;input type=&quot;button&quot; value=&quot;Use Hex for Gradient From&quot; 
    onclick=&quot;use_in_grad( document.forms.color.hex.value, 'from' );&quot; /&gt;
&lt;input type=&quot;button&quot; value=&quot;Use Hex for Gradient To&quot; 
    onclick=&quot;use_in_grad( document.forms.color.hex.value, 'to' );&quot; /&gt;

&lt;/form&gt;

&lt;div class=&quot;gradcell&quot; id=&quot;dechex&quot; width=&quot;64px&quot; height=&quot;32px&quot;&gt;
&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;48&quot; height=&quot;24&quot; /&gt;
&lt;/div&gt;

&lt;hr&gt;
&lt;form name=&quot;grad&quot;&gt;
From &lt;input type=&quot;text&quot; size=&quot;12&quot; name=&quot;from&quot; value=&quot;#ffffff&quot; /&gt; to
&lt;input type=&quot;text&quot; size=&quot;12&quot; name=&quot;to&quot; value=&quot;#000000&quot; /&gt; 
&lt;input type=&quot;button&quot; value=&quot;Generate Gradient&quot; onclick=&quot;on_gengrad( document.forms.grad )&quot; /&gt;
&lt;br /&gt;
&lt;input type=&quot;checkbox&quot; name=&quot;nametohex&quot; __checked&gt;Convert named colors to hex&lt;/input&gt;
&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot;&gt;
&lt;tr&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad0&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad1&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad2&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad3&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad4&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad5&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad6&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad7&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad8&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad9&quot; &gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad10&quot;&gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad11&quot;&gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad12&quot;&gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad13&quot;&gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad14&quot;&gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td&gt;&lt;div class=&quot;gradcell&quot; id=&quot;grad15&quot;&gt;&lt;img src=&quot;https://s3.amazonaws.com/static.everything2.com/dot.gif&quot; width=&quot;24&quot; height=&quot;24&quot; /&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr align=&quot;center&quot;&gt;
&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;&lt;td&gt;14&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;textarea name=&quot;output&quot; rows=&quot;17&quot; cols=&quot;16&quot;&gt;&lt;/textarea&gt;

&lt;/form&gt;

&lt;p&gt;Additional &quot;fake&quot; named colors: &lt;tt&gt;wharfkhaki, wharfolive, jukkaback, 
jukkaodd, jukkabrown&lt;/tt&gt;. &lt;/p&gt;

&lt;hr&gt;
&lt;script&gt;
&lt;!--
function on_bugrep( frm ) {
    function repl( m0, m1 ) {
        switch ( m1 ) {
            case '[':   return '&amp;#91;';
            case ']':   return '&amp;#93;';
            case '&lt;':   return '&amp;lt;';
            case '&gt;':   return '&amp;gt;';
            default:    return m1;
        }
    }

    var uastr = (navigator.userAgent + '').replace( /([\[\]\&lt;\&gt;])/g, repl );
    frm.message.value =   '/msg wharfinger &amp;#91;' + uastr + '&amp;#93; '
                        + frm.explain.value;

    return true;
}
//--&gt;
&lt;/script&gt;
&lt;p&gt;If you're having trouble with this page, explain briefly and click here:&lt;br /&gt;
[{openform2:bugrep}]
&lt;input type=&quot;hidden&quot; name=&quot;op&quot; value=&quot;message&quot; /&gt;
&lt;input type=&quot;hidden&quot; name=&quot;message&quot; /&gt;
&lt;input type=&quot;text&quot; size=&quot;40&quot; maxlength=&quot;150&quot; name=&quot;explain&quot; /&gt;
&lt;input type=&quot;submit&quot; name=&quot;message_send&quot; value=&quot;Bug Report&quot; onclick=&quot;return on_bugrep( document.forms.bugrep );&quot;/&gt;
&lt;/form&gt;
&lt;/p&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;p&gt;&lt;i&gt;Comments, complaints, offers one can't refuse, etc. all go
to &lt;a href=&quot;/index.pl?node_id=470183&quot;&gt;wharfinger&lt;/a&gt;.&lt;/i&gt; &lt;/p&gt;

&lt;p&gt;&lt;i&gt;In Opera 5, the hex and decimal values will be displayed, but 
not the colors. See 
&lt;a href=&quot;http://www.opera.com/docs/specs/js/&quot;&gt;Opera's DOM specs&lt;/a&gt;: 
They claim that as of version 6, they still don't support the&lt;/i&gt; 
&lt;tt&gt;backgroundColor&lt;/tt&gt; &lt;i&gt;attribute. However, I've gotten reports
from Win32 Opera 6 users saying that the colors work fine. They're 
definitely not working for me in Opera 5, though. That's a tough one 
to work around, but I'll see what I can do. I never advise anybody 
to &quot;upgrade&quot;; it's your life, use your own judgement. &lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Other than that, we seem to work properly with Mozilla 0.9.5 
(K-Meleon), Netscape 4, and IE 5.5 (Win32 for all three). If you're 
using IE4, or if you're using anything at all on Linux/UNIX, Mac, 
BeOS, Amiga, CPM-80, 16-bit Windows, Multics, or the Timex Sinclair, 
I'd like to hear from you.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;i&gt;[StarryNight] tells me that OmniWeb 4.0.6 on Mac is a no-go 
with this. [cbustapeck] is seeing problems with [icab] pre2.6 on 
MacOS 9.2.2 but not MacOS 10.1.2. A few weeks later: [cbustapeck]
just let me know that icab pre2.6 has expired, and all is well on 
[icab] pre2.71, on MacOS 9.2.2 and X. 
&lt;/i&gt;&lt;/p&gt;


</doctext>
  <node_id>1241839</node_id>
  <title>E2 Color Toy</title>
  <type_nodetype>1065266</type_nodetype>
</node>
