<node>
  <doctext>[%
my $currentYear = '2021';
my $dateMinInc = '' . $currentYear . '-11-01';
my $dateMaxExc = '' . $currentYear . '-12-01';
my $triggerAchievement = $query -&gt; param('ironise'); # option to activate achievement if iron noder period is not one calendar month

#constants
my $UID = getId($USER);
my $isGuest = $APP-&gt;isGuest($USER);
my $isRoot = $APP-&gt;isAdmin($USER);
my $isCE = $APP-&gt;isEditor($USER);
my $ironLeader;
my $isIronLeader = 0;
my $isIronNoder = 0;

#if there are more iron noder things later, this section should be updated to select appropriate group
#	ironnoders	2008 November
my $groupTitle = 'ironnoders';
my @groupTypes = ('usergroup');

my $isDaylogNode = sub {

	my $checkNode = shift;
	my $parentTitle = $$checkNode{parenttitle};
	
	return 1
		if $parentTitle =~ m/^(?:January|February|March|April|May|June|July|
								August|September|October|November|December)\s
								[[:digit:]]{1,2},\s[[:digit:]]{4}$/ix;
	return 1
		if $parentTitle =~ m/^(dream|editor|root) Log:/i;
	return 1
		if $parentTitle =~ m/^letters to the editors:/i;
	return 0;

};

my $ug = undef;
foreach(@groupTypes) {
	$ug = getNode($groupTitle, $_);
	last if defined $ug;
}

if(!defined $ug) {
	return 'Sorry; unable to find a list of iron noders.';
}
#return 'found group '.linkNode($ug);


#contains iron noder information
#	key is user node_id
#	value is light node ref
my %ironNoders;

my $str .= '&lt;ul&gt;
';

my $u;
my $ironID;
foreach $ironID (@{$$ug{group}}) {
	$u = getNodeById($ironID, 'light');

	if(!$u) {
		$str .= '(DEBUG: unable to get user ID '.$ironID.')';
		next;
	}

	$ironLeader = $ironID if !defined $ironLeader;

	$ironNoders{$ironID} = $u;

}

# We don't use $isIronNoder presently, but it might be useful in the future
#  if we want to show special things to the organizers/members
$isIronNoder = (defined $ironNoders{$UID});
$isIronLeader = ($ironLeader == $UID);
#$isIronLeader = 1 if $$USER{title} eq 'DonJaime';

#writeup information setup
my $showWUs = 1;
my $qh = undef;
my $typeID = getId(getType('writeup')) || undef;
if($showWUs &amp;&amp; !$typeID) {
	$showWUs = 0;
	$str .= '(DEBUG: unable to get writeup type)';
}

if($showWUs) {

	my $getWriteupQuery = &lt;&lt;QUERY;
SELECT
	node.node_id, node.title
	, parent.title 'parenttitle', writeup.parent_e2node
	, writeup.publishtime
	, vote.vote_id, writeup.wrtype_writeuptype, writeup.writeup_id
	FROM node
	LEFT OUTER JOIN vote
		ON
			voter_user = $UID
			AND vote_id = node.node_id
	JOIN writeup
		ON
			node.node_id = writeup.writeup_id
	LEFT OUTER JOIN node AS parent
		ON
			writeup.parent_e2node = parent.node_id
	WHERE
		node.type_nodetype = '$typeID'
		AND node.author_user =  ?
		AND writeup.publishtime  &gt;= ?
		AND writeup.publishtime  &lt;  ?
	ORDER BY
		writeup.publishtime ASC
QUERY

	$qh = $DB-&gt;{dbh}-&gt;prepare($getWriteupQuery);

	if(!$qh) {
		undef $qh;
		$showWUs = 0;
		$str .= '(DEBUG: unable to construct query for writeups)';
	}
}


#all iron noders
#	key is what to sort by
#	value is light node ref
my %ironNodersBySortKey;
my $sortKey;
foreach(keys(%ironNoders)) {
	#sort by username (case insensitive), and break tie by appending something arbitrary but consistent
	$sortKey = lc($ironNoders{$_}-&gt;{title}) . $ironNoders{$_}-&gt;{node_id};
	#while(exists $ironNodersBySortKey{$sortKey}) { $sortKey .= '.'; }
	$ironNodersBySortKey{ $sortKey } = $ironNoders{$_};
}

my @displayOrder = sort(keys(%ironNodersBySortKey));
#TODO? maybe reverse half the time to not favor items? maybe randomly split list in half (so everyone has equal chance of being somewhere in list)

my $BIGNUMBER = 99999;
my $WUCOUNTFORIRON = 30;
my $MAXDAYLOGCOUNT = 5;
my $statTotalWU = 0;
my $statTotalNoders = 0;
my $statNonzeroNoders = 0;
my $statIronNoders = 0;
my $statUserWU;
my $statMaxCount = -1;
my $statMinCount = $BIGNUMBER;
my $statMinCountPositive = $BIGNUMBER;
my $statVotedWU = 0;
my $statYourWU = 0;

my $htmlListUser;

my %functionMap = (
	votecheck =&gt; sub {
		my $N = shift;
		my $str = '';
		if ($$N{vote_id}) {
			$str .= 'hasvoted';
			$statVotedWU++;
		}
		return $str;
	},
	title =&gt; sub {
		my $N = shift;
		return linkNode($N, $$N{parenttitle}, { -class =&gt; 'title' } );
	},
	titleForWu =&gt; sub {
		my $N = shift;
		return &quot;[$$N{parenttitle}\[by $$u{title}]]&quot;;
	}
);

my $forWu = $isIronLeader &amp;&amp; $query -&gt; param('wuFormat') ? 'ForWu' : '';
my $instructions = &quot;&lt;li class=\&quot;&amp;votecheck\&quot;&gt;title$forWu&quot;;

foreach $sortKey (@displayOrder) {
	$u = $ironNodersBySortKey{$sortKey};
	$ironID = getId($u);
	unless($ironID) {
		$str .= '(DEBUG: unable to get ID for '.htmlEncode($sortKey).')';
		next;
	}

	$htmlListUser = '';

	$htmlListUser .= '&lt;li&gt;';
	if($showWUs) { $htmlListUser .= '&lt;big&gt;'; };
	$htmlListUser .= $forWu ? &quot;[$$u{title}\[user]]&quot; : linkNode($u);
	if($showWUs) { $htmlListUser .= '&lt;/big&gt;'; };

	if($showWUs) {
		$statUserWU = 0;

		$qh-&gt;execute(getId($u),$dateMinInc,$dateMaxExc);
		my @userWUs = ();
		while(my $r=$qh-&gt;fetchrow_hashref) {
			push(@userWUs, $r);
		}
		$qh-&gt;finish();
		my $daylogCount = 0;
		my @validWUs = grep { !$APP-&gt;isMaintenanceNode($_) } @userWUs;
		@validWUs = grep { !&amp;$isDaylogNode($_) || ++$daylogCount &lt;= $MAXDAYLOGCOUNT } @validWUs;
			
		$statUserWU = scalar(@validWUs);
		if ($daylogCount &gt; $MAXDAYLOGCOUNT) {
			my $excess = $daylogCount - $MAXDAYLOGCOUNT;
			my $plural = $excess &gt; 1 ? 's' : '';
			$statUserWU .= &quot; ignoring $excess daylog$plural above the $MAXDAYLOGCOUNT limit&quot;;
		}
		$htmlListUser .= ' (' . $statUserWU . ')';

		$htmlListUser .= &quot;&lt;ol&gt;\n&quot;;

		$htmlListUser .= htmlcode('show content', \@validWUs, $instructions, %functionMap)
			. '&lt;/ol&gt;'
			;

		#update stats
		$statTotalNoders++;
		$statTotalWU += $statUserWU;
		if ($UID == $ironID) { $statYourWU = $statUserWU; }
		if ($statUserWU &gt; 0) { $statNonzeroNoders++; }
		if ($statUserWU &gt;= $WUCOUNTFORIRON) {
			$statIronNoders++;
			htmlcode('hasAchieved', 'writeupsMonth30', $ironID, 1) if $triggerAchievement;
		}
		if($statUserWU &lt; $statMinCount) { $statMinCount = $statUserWU; }
		if(($statUserWU &lt; $statMinCountPositive) &amp;&amp; ($statUserWU&gt;0) ) { $statMinCountPositive = $statUserWU; }
		if($statUserWU &gt; $statMaxCount) { $statMaxCount = $statUserWU; }

	}

	$htmlListUser .= &quot;&lt;/li&gt;\n&quot;;
	$str .= $htmlListUser;

}

$str .= '&lt;/ul&gt;';

if ($forWu){
	$str =~ s/ class=&quot;[\w\s]+&quot;//g;
	$str = $query -&gt; textarea('text', $str, 40, 80);
	$str =~ s/\[/&amp;#91;/g;
	return $str;
}

#statistics
if($showWUs) {
	$str .= '&lt;p&gt;&lt;strong&gt;Current Year Statistics&lt;/strong&gt;:&lt;br /&gt;
';
	if ($statYourWU &gt; 0) {
		$str .= 'your writeups: '.$statYourWU.'&lt;br /&gt;
';
	}
	if ($statTotalWU - $statYourWU &gt; 0) {
		$str .= 'you have voted on '.$statVotedWU.' writeups (' . int(100 * $statVotedWU / ($statTotalWU - $statYourWU)) . '%) &lt;br /&gt;
';
	}
	if($statMinCount!=$BIGNUMBER) {
		$str .= 'minimum writeups: '.$statMinCount.'&lt;br /&gt;
';
	}
	if($statMinCountPositive!=$BIGNUMBER) {
		$str .= 'positive minimum writeups: '.$statMinCountPositive.'&lt;br /&gt;
';
	}
	if($statMaxCount&gt;=0) {
		$str .= 'maximum writeups: '.$statMaxCount.'&lt;br /&gt;
';
	}
	if ($statTotalNoders &gt; 0) {
		$str .= 'average writeups: ' . sprintf('%.2f', $statTotalWU / $statTotalNoders) . '&lt;br /&gt;
';
	}
	$str .= 'total writeups: '.$statTotalWU.'&lt;br /&gt;
';
	$str .= 'total noders: '.$statTotalNoders.'&lt;br /&gt;
';
	$str .= 'noders with at least one writeup: ' . $statNonzeroNoders . '&lt;br /&gt;
';
	$str .= 'IRON NODERS: '.$statIronNoders.'
&lt;/p&gt;';
}

my $leaderLink = $isIronLeader ? '&lt;p&gt; &amp;#91; '.linkNode($NODE, 'Format for writeup', {wuFormat =&gt; 'yes'}).' ]&lt;/p&gt;' : '';

return &quot;&lt;h3&gt;IRON NODER PROGRESS for $currentYear&lt;/h3&gt;
$leaderLink
$str&quot;;
%]

&lt;p&gt;&lt;br&gt;All-time IRON NODER statistics can be found at [THE HALL OF THE IRON].&lt;/p&gt;
</doctext>
  <node_id>2000213</node_id>
  <title>iron noder progress</title>
  <type_nodetype>14</type_nodetype>
</node>
