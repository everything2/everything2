<node>
  <doctext>[%
use utf8;
return &quot;&lt;p&gt;If you logged in, you'd be able to create a backup of your &quot;
	.&quot;writeups here.&lt;/p&gt;&quot; if $APP-&gt;isGuest($USER);

use Everything::S3;
use Archive::Zip; # This will itself require Compress::Zlib.
use IO::String;

my $zipbuffer;
my $iozipbuffer = IO::String-&gt;new($zipbuffer);
my $s3 = Everything::S3-&gt;new(&quot;nodebackup&quot;);

my $str = &quot;&quot;;

$str .= &quot;&lt;p&gt;Welcome to the node backup utility. Here you can
	download all of your writeups and/or drafts in a handy zipfile.&lt;/p&gt;\n&quot;;

$str .= htmlcode('openform',&quot;backup&quot;)
	.'&lt;label&gt;Back up:'
	.$query-&gt;popup_menu(
		-name =&gt; 'dowhat'
		, values =&gt; ['writeups and drafts', 'writeups', 'drafts']
	)
	.'&lt;/label&gt;&lt;br&gt;&lt;br&gt;'
	.$query-&gt;radio_group(
		-name=&gt;'e2parse',
		values=&gt;['1','2','3'],
		labels=&gt;{
			'1' =&gt; &quot;... as you typed them&quot;,
			'2' =&gt; &quot;... as E2 renders them&quot;,
			'3' =&gt; '... in both formats'},
		linebreak =&gt; 'true'
	)
	.'&lt;br&gt;';

        if(isGod($USER))
        {
          $str .= &quot;For noder: &quot;.$query-&gt;textfield(-name =&gt; &quot;for_noder&quot;).&quot; &lt;em&gt;(admin only)&lt;/em&gt;&lt;br /&gt;&quot;;
        }

	$str .= htmlcode('closeform', 'Create backup');


return $str unless $query-&gt;param(&quot;sexisgood&quot;);

my $e2parse = $query-&gt;param(&quot;e2parse&quot;);
my $targetNoder;

if ($query-&gt;param('for_noder') &amp;&amp; isGod($USER)) {
	# hard-of-access option to test on other other users' stuff:
	# draft security hole comparable to [SQL prompt]
	my $targetNoderName = $query-&gt;param(&quot;for_noder&quot;);
	$targetNoder = getNode($targetNoderName, &quot;user&quot;);
}

$targetNoder ||= $USER;
my $uid = $targetNoder -&gt; {user_id};

my @types = ($1, $2) if $query -&gt; param('dowhat') =~ /(writeup)?.*?(draft)?s$/;
@types = map { $_ ? 'type_nodetype='.getType($_)-&gt;{node_id} : () } @types;
my $where = join ' OR ', @types;

my $TAGNODE = getNode 'approved html tags', 'setting';
my $TAGS=getVars($TAGNODE);

my @wus;
my $csr = $DB -&gt; sqlSelectMany(
	'title, doctext, type_nodetype, node_id'
	, 'document JOIN node ON document_id=node_id'
	, &quot;author_user=$uid AND ($where)&quot;
);

while (my $wu_row = $csr-&gt;fetchrow_hashref){
	push @wus, $wu_row if $e2parse &amp; 1;
	push @wus, {
		title =&gt; $wu_row -&gt; {title},
		type_nodetype =&gt; $wu_row -&gt; {type_nodetype},
		suffix =&gt; 'html',
		doctext =&gt; &quot;&lt;base href=\&quot;https://everything2.com\&quot;&gt;\n&quot;.
			$APP-&gt;breakTags(parseLinks($APP-&gt;screenTable(
			$APP-&gt;htmlScreen($wu_row -&gt; {doctext},$TAGS))))
	} if $e2parse &amp; 2;
}

unless (@wus){
	return '&lt;p&gt;No '.$query -&gt; param('dowhat').&quot; found.&lt;/p&gt;\n&quot;;
}

my $zip = Archive::Zip-&gt;new();
$zip -&gt; addDirectory(&quot;text/&quot;) if $e2parse &amp; 1;
$zip -&gt; addDirectory(&quot;html/&quot;) if $e2parse &amp; 2;

my $draftType = getId(getType('draft'));
my %usedtitles = ();

foreach my $wu (@wus) {
	my $wu_title = $$wu{title};
	my $suffix = $$wu{suffix}||'txt';
	
	#Slashes create directories in the zip file, so change them to
	#dashes. Various other characters make various OSes puke, so change them, too.
	$wu_title =~ s,[^[:alnum:]&amp;#; ()],-,g;
	$wu_title .= ' (draft)' if $$wu{type_nodetype} == $draftType;
	my $trytitle = $wu_title;
	
	my $dupebust = 1;
	$wu_title = $trytitle.' ('.$dupebust++.')' while $usedtitles{&quot;$wu_title.$suffix&quot;};
	$usedtitles{&quot;$wu_title.$suffix&quot;} = 1;
	
        my $doctext = $$wu{doctext};
        utf8::encode($doctext);
        my $wusuffix = $$wu{suffix};
        utf8::encode($wusuffix);
	$zip-&gt;addString($doctext,($wusuffix || 'text').&quot;/$wu_title.$suffix&quot;);
}

my ($day, $month, $year) = (gmtime(time + $$VARS{localTimeOffset} + $$VARS{localTimeDST}*3600))[3 .. 5];
$month += 1; # month initially 0..11; make it 1..12
$year += 1900;
$day = &quot;0$day&quot; if $day &lt; 10;
$month = &quot;0$month&quot; if $month &lt; 10;

my $cleanUser = $APP-&gt;rewriteCleanEscape($targetNoder -&gt; {title});
my $format = ('text', 'html', 'text-html')[$e2parse-1];

# make URL hard to guess
my $obfuscateUrl = int(rand(8999999)) + 1000000;
my $outputfilename = &quot;$cleanUser.$format.$obfuscateUrl.$year-$month-$day.zip&quot;;

$zip-&gt;writeToFileHandle($iozipbuffer);
close($iozipbuffer);
$s3-&gt;upload_data($outputfilename, $zipbuffer, {content_type =&gt; &quot;application/zip&quot;});

my $url = &quot;https://s3-us-west-2.amazonaws.com/nodebackup.everything2.com/$outputfilename&quot;;

$str .= &quot;&lt;p&gt; Your backup is ready. You can fetch it &quot;
	.&quot;&lt;strong&gt;&lt;a href=\&quot;$url\&quot;&gt;$url&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&quot;;

$str .= &quot;&lt;p&gt;This link is public in the sense that anyone with the URL can download it, and will last for 7 days, in which time it will be automatically deleted. This is the only time you will see this link, so download it now.&lt;/p&gt;&quot;;

$str .= '&lt;p&gt;This is not your work and some of it may be private. Please do not read
	the drafts and remember to delete the backup after checking it is OK.'
		if $uid != $$USER{user_id} and $where =~ /$draftType/;

return $str;

%]</doctext>
  <node_id>2203037</node_id>
  <title>Node Backup 2</title>
  <type_nodetype>14</type_nodetype>
</node>
